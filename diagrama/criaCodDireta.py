diagrama = {
    'A&a': 'B',
    'A&b': 'C',
    'A&c': 'D',
    'A&d': 'C',
    'A&e': 'E',
    'A&f': 'F',
    'A&g': 'C',
    'A&h': 'C',
    'A&i': 'G',
    'A&j': 'C',
    'A&k': 'C',
    'A&l': 'C',
    'A&m': 'C',
    'A&n': 'C',
    'A&o': 'C',
    'A&p': 'H',
    'A&q': 'C',
    'A&r': 'I',
    'A&s': 'J',
    'A&t': 'C',
    'A&u': 'C',
    'A&v': 'C',
    'A&w': 'C',
    'A&x': 'C',
    'A&y': 'C',
    'A&z': 'C',
    'A&_': 'C',
    'A&<': 'K',
    'A&-': 'L',
    'A&+': 'M',
    'A&/': 'N',
    'A&*': 'O',
    'A&^': 'P',
    'A&>': 'Q',
    'A&=': 'R',
    'A&.': 'ER',
    'A&,': 'S',
    'A&;': 'T',
    'A&:': 'RA',
    'A&(': 'U',
    'A&)': 'V',
    'A&[': 'W',
    'A&]': 'X',
    'A&\n': 'Y',
    'A&\t': 'Y',
    'A& ': 'Y',
    'A&0': 'Z',
    'A&1': 'Z',
    'A&2': 'Z',
    'A&3': 'Z',
    'A&4': 'Z',
    'A&5': 'Z',
    'A&6': 'Z',
    'A&7': 'Z',
    'A&8': 'Z',
    'A&9': 'Z',
    'A&\'': 'AA',
    'B&a': 'C',
    'B&b': 'C',
    'B&c': 'C',
    'B&d': 'C',
    'B&e': 'C',
    'B&f': 'C',
    'B&g': 'C',
    'B&h': 'C',
    'B&i': 'C',
    'B&j': 'C',
    'B&k': 'C',
    'B&l': 'C',
    'B&m': 'C',
    'B&n': 'C',
    'B&o': 'C',
    'B&p': 'C',
    'B&q': 'C',
    'B&r': 'C',
    'B&s': 'C',
    'B&t': 'AB',
    'B&u': 'C',
    'B&v': 'C',
    'B&w': 'C',
    'B&x': 'C',
    'B&y': 'C',
    'B&z': 'C',
    'B&_': 'C',
    'B&<': 'AC',
    'B&-': 'AC',
    'B&+': 'AC',
    'B&/': 'AC',
    'B&*': 'AC',
    'B&^': 'AC',
    'B&>': 'AC',
    'B&=': 'AC',
    'B&.': 'AC',
    'B&,': 'AC',
    'B&;': 'AC',
    'B&:': 'AC',
    'B&(': 'AC',
    'B&)': 'AC',
    'B&[': 'AC',
    'B&]': 'AC',
    'B&\n': 'AC',
    'B&\t': 'AC',
    'B& ': 'AC',
    'B&0': 'C',
    'B&1': 'C',
    'B&2': 'C',
    'B&3': 'C',
    'B&4': 'C',
    'B&5': 'C',
    'B&6': 'C',
    'B&7': 'C',
    'B&8': 'C',
    'B&9': 'C',
    'B&\'': 'AC',
    'C&a': 'C',
    'C&b': 'C',
    'C&c': 'C',
    'C&d': 'C',
    'C&e': 'C',
    'C&f': 'C',
    'C&g': 'C',
    'C&h': 'C',
    'C&i': 'C',
    'C&j': 'C',
    'C&k': 'C',
    'C&l': 'C',
    'C&m': 'C',
    'C&n': 'C',
    'C&o': 'C',
    'C&p': 'C',
    'C&q': 'C',
    'C&r': 'C',
    'C&s': 'C',
    'C&t': 'C',
    'C&u': 'C',
    'C&v': 'C',
    'C&w': 'C',
    'C&x': 'C',
    'C&y': 'C',
    'C&z': 'C',
    'C&_': 'C',
    'C&<': 'AC',
    'C&-': 'AC',
    'C&+': 'AC',
    'C&/': 'AC',
    'C&*': 'AC',
    'C&^': 'AC',
    'C&>': 'AC',
    'C&=': 'AC',
    'C&.': 'AC',
    'C&,': 'AC',
    'C&;': 'AC',
    'C&:': 'AC',
    'C&(': 'AC',
    'C&)': 'AC',
    'C&[': 'AC',
    'C&]': 'AC',
    'C&\n': 'AC',
    'C&\t': 'AC',
    'C& ': 'AC',
    'C&0': 'C',
    'C&1': 'C',
    'C&2': 'C',
    'C&3': 'C',
    'C&4': 'C',
    'C&5': 'C',
    'C&6': 'C',
    'C&7': 'C',
    'C&8': 'C',
    'C&9': 'C',
    'C&\'': 'AC',
    'D&a': 'C',
    'D&b': 'C',
    'D&c': 'C',
    'D&d': 'C',
    'D&e': 'C',
    'D&f': 'C',
    'D&g': 'C',
    'D&h': 'AD',
    'D&i': 'C',
    'D&j': 'C',
    'D&k': 'C',
    'D&l': 'C',
    'D&m': 'C',
    'D&n': 'C',
    'D&o': 'C',
    'D&p': 'C',
    'D&q': 'C',
    'D&r': 'C',
    'D&s': 'C',
    'D&t': 'C',
    'D&u': 'C',
    'D&v': 'C',
    'D&w': 'C',
    'D&x': 'C',
    'D&y': 'C',
    'D&z': 'C',
    'D&_': 'C',
    'D&<': 'AC',
    'D&-': 'AC',
    'D&+': 'AC',
    'D&/': 'AC',
    'D&*': 'AC',
    'D&^': 'AC',
    'D&>': 'AC',
    'D&=': 'AC',
    'D&.': 'AC',
    'D&,': 'AC',
    'D&;': 'AC',
    'D&:': 'AC',
    'D&(': 'AC',
    'D&)': 'AC',
    'D&[': 'AC',
    'D&]': 'AC',
    'D&\n': 'AC',
    'D&\t': 'AC',
    'D& ': 'AC',
    'D&0': 'C',
    'D&1': 'C',
    'D&2': 'C',
    'D&3': 'C',
    'D&4': 'C',
    'D&5': 'C',
    'D&6': 'C',
    'D&7': 'C',
    'D&8': 'C',
    'D&9': 'C',
    'D&\'': 'AC',
    'E&a': 'C',
    'E&b': 'C',
    'E&c': 'C',
    'E&d': 'C',
    'E&e': 'C',
    'E&f': 'C',
    'E&g': 'C',
    'E&h': 'C',
    'E&i': 'C',
    'E&j': 'C',
    'E&k': 'C',
    'E&l': 'C',
    'E&m': 'C',
    'E&n': 'AE',
    'E&o': 'C',
    'E&p': 'C',
    'E&q': 'C',
    'E&r': 'C',
    'E&s': 'C',
    'E&t': 'C',
    'E&u': 'C',
    'E&v': 'C',
    'E&w': 'C',
    'E&x': 'C',
    'E&y': 'C',
    'E&z': 'C',
    'E&_': 'C',
    'E&<': 'AC',
    'E&-': 'AC',
    'E&+': 'AC',
    'E&/': 'AC',
    'E&*': 'AC',
    'E&^': 'AC',
    'E&>': 'AC',
    'E&=': 'AC',
    'E&.': 'AC',
    'E&,': 'AC',
    'E&;': 'AC',
    'E&:': 'AC',
    'E&(': 'AC',
    'E&)': 'AC',
    'E&[': 'AC',
    'E&]': 'AC',
    'E&\n': 'AC',
    'E&\t': 'AC',
    'E& ': 'AC',
    'E&0': 'C',
    'E&1': 'C',
    'E&2': 'C',
    'E&3': 'C',
    'E&4': 'C',
    'E&5': 'C',
    'E&6': 'C',
    'E&7': 'C',
    'E&8': 'C',
    'E&9': 'C',
    'E&\'': 'AC',
    'F&a': 'AF',
    'F&b': 'C',
    'F&c': 'C',
    'F&d': 'C',
    'F&e': 'C',
    'F&f': 'C',
    'F&g': 'C',
    'F&h': 'C',
    'F&i': 'AG',
    'F&j': 'C',
    'F&k': 'C',
    'F&l': 'AH',
    'F&m': 'C',
    'F&n': 'C',
    'F&o': 'C',
    'F&p': 'C',
    'F&q': 'C',
    'F&r': 'C',
    'F&s': 'C',
    'F&t': 'C',
    'F&u': 'C',
    'F&v': 'C',
    'F&w': 'C',
    'F&x': 'C',
    'F&y': 'C',
    'F&z': 'C',
    'F&_': 'C',
    'F&<': 'AC',
    'F&-': 'AC',
    'F&+': 'AC',
    'F&/': 'AC',
    'F&*': 'AC',
    'F&^': 'AC',
    'F&>': 'AC',
    'F&=': 'AC',
    'F&.': 'AC',
    'F&,': 'AC',
    'F&;': 'AC',
    'F&:': 'AC',
    'F&(': 'AC',
    'F&)': 'AC',
    'F&[': 'AC',
    'F&]': 'AC',
    'F&\n': 'AC',
    'F&\t': 'AC',
    'F& ': 'AC',
    'F&0': 'C',
    'F&1': 'C',
    'F&2': 'C',
    'F&3': 'C',
    'F&4': 'C',
    'F&5': 'C',
    'F&6': 'C',
    'F&7': 'C',
    'F&8': 'C',
    'F&9': 'C',
    'F&\'': 'AC',
    'G&a': 'C',
    'G&b': 'C',
    'G&c': 'C',
    'G&d': 'C',
    'G&e': 'C',
    'G&f': 'C',
    'G&g': 'C',
    'G&h': 'C',
    'G&i': 'C',
    'G&j': 'C',
    'G&k': 'C',
    'G&l': 'C',
    'G&m': 'C',
    'G&n': 'AI',
    'G&o': 'C',
    'G&p': 'C',
    'G&q': 'C',
    'G&r': 'C',
    'G&s': 'C',
    'G&t': 'C',
    'G&u': 'C',
    'G&v': 'C',
    'G&w': 'C',
    'G&x': 'C',
    'G&y': 'C',
    'G&z': 'C',
    'G&_': 'C',
    'G&<': 'AC',
    'G&-': 'AC',
    'G&+': 'AC',
    'G&/': 'AC',
    'G&*': 'AC',
    'G&^': 'AC',
    'G&>': 'AC',
    'G&=': 'AC',
    'G&.': 'AC',
    'G&,': 'AC',
    'G&;': 'AC',
    'G&:': 'AC',
    'G&(': 'AC',
    'G&)': 'AC',
    'G&[': 'AC',
    'G&]': 'AC',
    'G&\n': 'AC',
    'G&\t': 'AC',
    'G& ': 'AC',
    'G&0': 'C',
    'G&1': 'C',
    'G&2': 'C',
    'G&3': 'C',
    'G&4': 'C',
    'G&5': 'C',
    'G&6': 'C',
    'G&7': 'C',
    'G&8': 'C',
    'G&9': 'C',
    'G&\'': 'AC',
    'H&a': 'C',
    'H&b': 'C',
    'H&c': 'C',
    'H&d': 'C',
    'H&e': 'C',
    'H&f': 'C',
    'H&g': 'C',
    'H&h': 'C',
    'H&i': 'C',
    'H&j': 'C',
    'H&k': 'C',
    'H&l': 'C',
    'H&m': 'C',
    'H&n': 'C',
    'H&o': 'C',
    'H&p': 'C',
    'H&q': 'C',
    'H&r': 'AJ',
    'H&s': 'C',
    'H&t': 'C',
    'H&u': 'C',
    'H&v': 'C',
    'H&w': 'C',
    'H&x': 'C',
    'H&y': 'C',
    'H&z': 'C',
    'H&_': 'C',
    'H&<': 'AC',
    'H&-': 'AC',
    'H&+': 'AC',
    'H&/': 'AC',
    'H&*': 'AC',
    'H&^': 'AC',
    'H&>': 'AC',
    'H&=': 'AC',
    'H&.': 'AC',
    'H&,': 'AC',
    'H&;': 'AC',
    'H&:': 'AC',
    'H&(': 'AC',
    'H&)': 'AC',
    'H&[': 'AC',
    'H&]': 'AC',
    'H&\n': 'AC',
    'H&\t': 'AC',
    'H& ': 'AC',
    'H&0': 'C',
    'H&1': 'C',
    'H&2': 'C',
    'H&3': 'C',
    'H&4': 'C',
    'H&5': 'C',
    'H&6': 'C',
    'H&7': 'C',
    'H&8': 'C',
    'H&9': 'C',
    'H&\'': 'AC',
    'I&a': 'C',
    'I&b': 'C',
    'I&c': 'C',
    'I&d': 'C',
    'I&e': 'AK',
    'I&f': 'C',
    'I&g': 'C',
    'I&h': 'C',
    'I&i': 'C',
    'I&j': 'C',
    'I&k': 'C',
    'I&l': 'C',
    'I&m': 'C',
    'I&n': 'C',
    'I&o': 'C',
    'I&p': 'C',
    'I&q': 'C',
    'I&r': 'C',
    'I&s': 'C',
    'I&t': 'C',
    'I&u': 'C',
    'I&v': 'C',
    'I&w': 'C',
    'I&x': 'C',
    'I&y': 'C',
    'I&z': 'C',
    'I&_': 'C',
    'I&<': 'AC',
    'I&-': 'AC',
    'I&+': 'AC',
    'I&/': 'AC',
    'I&*': 'AC',
    'I&^': 'AC',
    'I&>': 'AC',
    'I&=': 'AC',
    'I&.': 'AC',
    'I&,': 'AC',
    'I&;': 'AC',
    'I&:': 'AC',
    'I&(': 'AC',
    'I&)': 'AC',
    'I&[': 'AC',
    'I&]': 'AC',
    'I&\n': 'AC',
    'I&\t': 'AC',
    'I& ': 'AC',
    'I&0': 'C',
    'I&1': 'C',
    'I&2': 'C',
    'I&3': 'C',
    'I&4': 'C',
    'I&5': 'C',
    'I&6': 'C',
    'I&7': 'C',
    'I&8': 'C',
    'I&9': 'C',
    'I&\'': 'AC',
    'J&a': 'C',
    'J&b': 'C',
    'J&c': 'C',
    'J&d': 'C',
    'J&e': 'AL',
    'J&f': 'C',
    'J&g': 'C',
    'J&h': 'C',
    'J&i': 'C',
    'J&j': 'C',
    'J&k': 'C',
    'J&l': 'C',
    'J&m': 'C',
    'J&n': 'C',
    'J&o': 'C',
    'J&p': 'C',
    'J&q': 'C',
    'J&r': 'C',
    'J&s': 'C',
    'J&t': 'C',
    'J&u': 'C',
    'J&v': 'C',
    'J&w': 'C',
    'J&x': 'C',
    'J&y': 'C',
    'J&z': 'C',
    'J&_': 'C',
    'J&<': 'AC',
    'J&-': 'AC',
    'J&+': 'AC',
    'J&/': 'AC',
    'J&*': 'AC',
    'J&^': 'AC',
    'J&>': 'AC',
    'J&=': 'AC',
    'J&.': 'AC',
    'J&,': 'AC',
    'J&;': 'AC',
    'J&:': 'AC',
    'J&(': 'AC',
    'J&)': 'AC',
    'J&[': 'AC',
    'J&]': 'AC',
    'J&\n': 'AC',
    'J&\t': 'AC',
    'J& ': 'AC',
    'J&0': 'C',
    'J&1': 'C',
    'J&2': 'C',
    'J&3': 'C',
    'J&4': 'C',
    'J&5': 'C',
    'J&6': 'C',
    'J&7': 'C',
    'J&8': 'C',
    'J&9': 'C',
    'J&\'': 'AC',
    'K&a': 'AM',
    'K&b': 'AM',
    'K&c': 'AM',
    'K&d': 'AM',
    'K&e': 'AM',
    'K&f': 'AM',
    'K&g': 'AM',
    'K&h': 'AM',
    'K&i': 'AM',
    'K&j': 'AM',
    'K&k': 'AM',
    'K&l': 'AM',
    'K&m': 'AM',
    'K&n': 'AM',
    'K&o': 'AM',
    'K&p': 'AM',
    'K&q': 'AM',
    'K&r': 'AM',
    'K&s': 'AM',
    'K&t': 'AM',
    'K&u': 'AM',
    'K&v': 'AM',
    'K&w': 'AM',
    'K&x': 'AM',
    'K&y': 'AM',
    'K&z': 'AM',
    'K&_': 'AM',
    'K&<': 'AM',
    'K&-': 'AN',
    'K&+': 'AM',
    'K&/': 'AM',
    'K&*': 'AM',
    'K&^': 'AM',
    'K&>': 'AO',
    'K&=': 'AP',
    'K&.': 'AM',
    'K&,': 'AM',
    'K&;': 'AM',
    'K&:': 'AM',
    'K&(': 'AM',
    'K&)': 'AM',
    'K&[': 'AM',
    'K&]': 'AM',
    'K&\n': 'AM',
    'K&\t': 'AM',
    'K& ': 'AM',
    'K&0': 'AM',
    'K&1': 'AM',
    'K&2': 'AM',
    'K&3': 'AM',
    'K&4': 'AM',
    'K&5': 'AM',
    'K&6': 'AM',
    'K&7': 'AM',
    'K&8': 'AM',
    'K&9': 'AM',
    'K&\'': 'AM',
    'Q&a': 'AQ',
    'Q&b': 'AQ',
    'Q&c': 'AQ',
    'Q&d': 'AQ',
    'Q&e': 'AQ',
    'Q&f': 'AQ',
    'Q&g': 'AQ',
    'Q&h': 'AQ',
    'Q&i': 'AQ',
    'Q&j': 'AQ',
    'Q&k': 'AQ',
    'Q&l': 'AQ',
    'Q&m': 'AQ',
    'Q&n': 'AQ',
    'Q&o': 'AQ',
    'Q&p': 'AQ',
    'Q&q': 'AQ',
    'Q&r': 'AQ',
    'Q&s': 'AQ',
    'Q&t': 'AQ',
    'Q&u': 'AQ',
    'Q&v': 'AQ',
    'Q&w': 'AQ',
    'Q&x': 'AQ',
    'Q&y': 'AQ',
    'Q&z': 'AQ',
    'Q&_': 'AQ',
    'Q&<': 'AQ',
    'Q&-': 'AQ',
    'Q&+': 'AQ',
    'Q&/': 'AQ',
    'Q&*': 'AQ',
    'Q&^': 'AQ',
    'Q&>': 'AQ',
    'Q&=': 'AR',
    'Q&.': 'AQ',
    'Q&,': 'AQ',
    'Q&;': 'AQ',
    'Q&:': 'AQ',
    'Q&(': 'AQ',
    'Q&)': 'AQ',
    'Q&[': 'AQ',
    'Q&]': 'AQ',
    'Q&\n': 'AQ',
    'Q&\t': 'AQ',
    'Q& ': 'AQ',
    'Q&0': 'AQ',
    'Q&1': 'AQ',
    'Q&2': 'AQ',
    'Q&3': 'AQ',
    'Q&4': 'AQ',
    'Q&5': 'AQ',
    'Q&6': 'AQ',
    'Q&7': 'AQ',
    'Q&8': 'AQ',
    'Q&9': 'AQ',
    'Q&\'': 'AQ',
    'Y&a': 'AS',
    'Y&b': 'AS',
    'Y&c': 'AS',
    'Y&d': 'AS',
    'Y&e': 'AS',
    'Y&f': 'AS',
    'Y&g': 'AS',
    'Y&h': 'AS',
    'Y&i': 'AS',
    'Y&j': 'AS',
    'Y&k': 'AS',
    'Y&l': 'AS',
    'Y&m': 'AS',
    'Y&n': 'AS',
    'Y&o': 'AS',
    'Y&p': 'AS',
    'Y&q': 'AS',
    'Y&r': 'AS',
    'Y&s': 'AS',
    'Y&t': 'AS',
    'Y&u': 'AS',
    'Y&v': 'AS',
    'Y&w': 'AS',
    'Y&x': 'AS',
    'Y&y': 'AS',
    'Y&z': 'AS',
    'Y&_': 'AS',
    'Y&<': 'AS',
    'Y&-': 'AS',
    'Y&+': 'AS',
    'Y&/': 'AS',
    'Y&*': 'AS',
    'Y&^': 'AS',
    'Y&>': 'AS',
    'Y&=': 'AS',
    'Y&.': 'AS',
    'Y&,': 'AS',
    'Y&;': 'AS',
    'Y&:': 'AS',
    'Y&(': 'AS',
    'Y&)': 'AS',
    'Y&[': 'AS',
    'Y&]': 'AS',
    'Y&\n': 'Y',
    'Y&\t': 'Y',
    'Y& ': 'Y',
    'Y&0': 'AS',
    'Y&1': 'AS',
    'Y&2': 'AS',
    'Y&3': 'AS',
    'Y&4': 'AS',
    'Y&5': 'AS',
    'Y&6': 'AS',
    'Y&7': 'AS',
    'Y&8': 'AS',
    'Y&9': 'AS',
    'Y&\'': 'AS',
    'Z&a': 'AT',
    'Z&b': 'AT',
    'Z&c': 'AT',
    'Z&d': 'AT',
    'Z&e': 'BZ',
    'Z&f': 'AT',
    'Z&g': 'AT',
    'Z&h': 'AT',
    'Z&i': 'AT',
    'Z&j': 'AT',
    'Z&k': 'AT',
    'Z&l': 'AT',
    'Z&m': 'AT',
    'Z&n': 'AT',
    'Z&o': 'AT',
    'Z&p': 'AT',
    'Z&q': 'AT',
    'Z&r': 'AT',
    'Z&s': 'AT',
    'Z&t': 'AT',
    'Z&u': 'AT',
    'Z&v': 'AT',
    'Z&w': 'AT',
    'Z&x': 'AT',
    'Z&y': 'AT',
    'Z&z': 'AT',
    'Z&_': 'AT',
    'Z&<': 'AT',
    'Z&-': 'AT',
    'Z&+': 'AT',
    'Z&/': 'AT',
    'Z&*': 'AT',
    'Z&^': 'AT',
    'Z&>': 'AT',
    'Z&=': 'AT',
    'Z&.': 'AU',
    'Z&,': 'AT',
    'Z&;': 'AT',
    'Z&:': 'AT',
    'Z&(': 'AT',
    'Z&)': 'AT',
    'Z&[': 'AT',
    'Z&]': 'AT',
    'Z&\n': 'AT',
    'Z&\t': 'AT',
    'Z& ': 'AT',
    'Z&0': 'Z',
    'Z&1': 'Z',
    'Z&2': 'Z',
    'Z&3': 'Z',
    'Z&4': 'Z',
    'Z&5': 'Z',
    'Z&6': 'Z',
    'Z&7': 'Z',
    'Z&8': 'Z',
    'Z&9': 'Z',
    'Z&\'': 'AT',
    'AA&a': 'AV',
    'AA&b': 'AV',
    'AA&c': 'AV',
    'AA&d': 'AV',
    'AA&e': 'AV',
    'AA&f': 'AV',
    'AA&g': 'AV',
    'AA&h': 'AV',
    'AA&i': 'AV',
    'AA&j': 'AV',
    'AA&k': 'AV',
    'AA&l': 'AV',
    'AA&m': 'AV',
    'AA&n': 'AV',
    'AA&o': 'AV',
    'AA&p': 'AV',
    'AA&q': 'AV',
    'AA&r': 'AV',
    'AA&s': 'AV',
    'AA&t': 'AV',
    'AA&u': 'AV',
    'AA&v': 'AV',
    'AA&w': 'AV',
    'AA&x': 'AV',
    'AA&y': 'AV',
    'AA&z': 'AV',
    'AA&_': 'ER',
    'AA&<': 'ER',
    'AA&-': 'ER',
    'AA&+': 'ER',
    'AA&/': 'ER',
    'AA&*': 'ER',
    'AA&^': 'ER',
    'AA&>': 'ER',
    'AA&=': 'ER',
    'AA&.': 'ER',
    'AA&,': 'ER',
    'AA&;': 'ER',
    'AA&:': 'ER',
    'AA&(': 'ER',
    'AA&)': 'ER',
    'AA&[': 'ER',
    'AA&]': 'ER',
    'AA&\n': 'ER',
    'AA&\t': 'ER',
    'AA& ': 'ER',
    'AA&0': 'ER',
    'AA&1': 'ER',
    'AA&2': 'ER',
    'AA&3': 'ER',
    'AA&4': 'ER',
    'AA&5': 'ER',
    'AA&6': 'ER',
    'AA&7': 'ER',
    'AA&8': 'ER',
    'AA&9': 'ER',
    'AA&\'': 'ER',
    'AB&a': 'C',
    'AB&b': 'C',
    'AB&c': 'C',
    'AB&d': 'C',
    'AB&e': 'AW',
    'AB&f': 'C',
    'AB&g': 'C',
    'AB&h': 'C',
    'AB&i': 'C',
    'AB&j': 'C',
    'AB&k': 'C',
    'AB&l': 'C',
    'AB&m': 'C',
    'AB&n': 'C',
    'AB&o': 'C',
    'AB&p': 'C',
    'AB&q': 'C',
    'AB&r': 'C',
    'AB&s': 'C',
    'AB&t': 'C',
    'AB&u': 'C',
    'AB&v': 'C',
    'AB&w': 'C',
    'AB&x': 'C',
    'AB&y': 'C',
    'AB&z': 'C',
    'AB&_': 'C',
    'AB&<': 'AC',
    'AB&-': 'AC',
    'AB&+': 'AC',
    'AB&/': 'AC',
    'AB&*': 'AC',
    'AB&^': 'AC',
    'AB&>': 'AC',
    'AB&=': 'AC',
    'AB&.': 'AC',
    'AB&,': 'AC',
    'AB&;': 'AC',
    'AB&:': 'AC',
    'AB&(': 'AC',
    'AB&)': 'AC',
    'AB&[': 'AC',
    'AB&]': 'AC',
    'AB&\n': 'AC',
    'AB&\t': 'AC',
    'AB& ': 'AC',
    'AB&0': 'C',
    'AB&1': 'C',
    'AB&2': 'C',
    'AB&3': 'C',
    'AB&4': 'C',
    'AB&5': 'C',
    'AB&6': 'C',
    'AB&7': 'C',
    'AB&8': 'C',
    'AB&9': 'C',
    'AB&\'': 'AC',
    'AD&a': 'AY',
    'AD&b': 'C',
    'AD&c': 'C',
    'AD&d': 'C',
    'AD&e': 'C',
    'AD&f': 'C',
    'AD&g': 'C',
    'AD&h': 'C',
    'AD&i': 'C',
    'AD&j': 'C',
    'AD&k': 'C',
    'AD&l': 'C',
    'AD&m': 'C',
    'AD&n': 'C',
    'AD&o': 'C',
    'AD&p': 'C',
    'AD&q': 'C',
    'AD&r': 'C',
    'AD&s': 'C',
    'AD&t': 'C',
    'AD&u': 'C',
    'AD&v': 'C',
    'AD&w': 'C',
    'AD&x': 'C',
    'AD&y': 'C',
    'AD&z': 'C',
    'AD&_': 'C',
    'AD&<': 'AC',
    'AD&-': 'AC',
    'AD&+': 'AC',
    'AD&/': 'AC',
    'AD&*': 'AC',
    'AD&^': 'AC',
    'AD&>': 'AC',
    'AD&=': 'AC',
    'AD&.': 'AC',
    'AD&,': 'AC',
    'AD&;': 'AC',
    'AD&:': 'AC',
    'AD&(': 'AC',
    'AD&)': 'AC',
    'AD&[': 'AC',
    'AD&]': 'AC',
    'AD&\n': 'AC',
    'AD&\t': 'AC',
    'AD& ': 'AC',
    'AD&0': 'C',
    'AD&1': 'C',
    'AD&2': 'C',
    'AD&3': 'C',
    'AD&4': 'C',
    'AD&5': 'C',
    'AD&6': 'C',
    'AD&7': 'C',
    'AD&8': 'C',
    'AD&9': 'C',
    'AD&\'': 'AC',
    'AE&a': 'AY',
    'AE&b': 'C',
    'AE&c': 'C',
    'AE&d': 'C',
    'AE&e': 'C',
    'AE&f': 'C',
    'AE&g': 'C',
    'AE&h': 'C',
    'AE&i': 'C',
    'AE&j': 'C',
    'AE&k': 'C',
    'AE&l': 'C',
    'AE&m': 'C',
    'AE&n': 'C',
    'AE&o': 'C',
    'AE&p': 'C',
    'AE&q': 'AX',
    'AE&r': 'C',
    'AE&s': 'C',
    'AE&t': 'AZ',
    'AE&u': 'C',
    'AE&v': 'C',
    'AE&w': 'C',
    'AE&x': 'C',
    'AE&y': 'C',
    'AE&z': 'C',
    'AE&_': 'C',
    'AE&<': 'AC',
    'AE&-': 'AC',
    'AE&+': 'AC',
    'AE&/': 'AC',
    'AE&*': 'AC',
    'AE&^': 'AC',
    'AE&>': 'AC',
    'AE&=': 'AC',
    'AE&.': 'AC',
    'AE&,': 'AC',
    'AE&;': 'AC',
    'AE&:': 'AC',
    'AE&(': 'AC',
    'AE&)': 'AC',
    'AE&[': 'AC',
    'AE&]': 'AC',
    'AE&\n': 'AC',
    'AE&\t': 'AC',
    'AE& ': 'AC',
    'AE&0': 'C',
    'AE&1': 'C',
    'AE&2': 'C',
    'AE&3': 'C',
    'AE&4': 'C',
    'AE&5': 'C',
    'AE&6': 'C',
    'AE&7': 'C',
    'AE&8': 'C',
    'AE&9': 'C',
    'AE&\'': 'AC',
    'AF&a': 'C',
    'AF&b': 'C',
    'AF&c': 'BA',
    'AF&d': 'C',
    'AF&e': 'C',
    'AF&f': 'C',
    'AF&g': 'C',
    'AF&h': 'C',
    'AF&i': 'C',
    'AF&j': 'C',
    'AF&k': 'C',
    'AF&l': 'C',
    'AF&m': 'C',
    'AF&n': 'C',
    'AF&o': 'C',
    'AF&p': 'C',
    'AF&q': 'C',
    'AF&r': 'C',
    'AF&s': 'C',
    'AF&t': 'C',
    'AF&u': 'C',
    'AF&v': 'C',
    'AF&w': 'C',
    'AF&x': 'C',
    'AF&y': 'C',
    'AF&z': 'C',
    'AF&_': 'C',
    'AF&<': 'AC',
    'AF&-': 'AC',
    'AF&+': 'AC',
    'AF&/': 'AC',
    'AF&*': 'AC',
    'AF&^': 'AC',
    'AF&>': 'AC',
    'AF&=': 'AC',
    'AF&.': 'AC',
    'AF&,': 'AC',
    'AF&;': 'AC',
    'AF&:': 'AC',
    'AF&(': 'AC',
    'AF&)': 'AC',
    'AF&[': 'AC',
    'AF&]': 'AC',
    'AF&\n': 'AC',
    'AF&\t': 'AC',
    'AF& ': 'AC',
    'AF&0': 'C',
    'AF&1': 'C',
    'AF&2': 'C',
    'AF&3': 'C',
    'AF&4': 'C',
    'AF&5': 'C',
    'AF&6': 'C',
    'AF&7': 'C',
    'AF&8': 'C',
    'AF&9': 'C',
    'AF&\'': 'AC',
    'AG&a': 'C',
    'AG&b': 'C',
    'AG&c': 'C',
    'AG&d': 'C',
    'AG&e': 'C',
    'AG&f': 'C',
    'AG&g': 'C',
    'AG&h': 'C',
    'AG&i': 'C',
    'AG&j': 'C',
    'AG&k': 'C',
    'AG&l': 'C',
    'AG&m': 'BB',
    'AG&n': 'C',
    'AG&o': 'C',
    'AG&p': 'C',
    'AG&q': 'C',
    'AG&r': 'C',
    'AG&s': 'C',
    'AG&t': 'C',
    'AG&u': 'C',
    'AG&v': 'C',
    'AG&w': 'C',
    'AG&x': 'C',
    'AG&y': 'C',
    'AG&z': 'C',
    'AG&_': 'C',
    'AG&<': 'AC',
    'AG&-': 'AC',
    'AG&+': 'AC',
    'AG&/': 'AC',
    'AG&*': 'AC',
    'AG&^': 'AC',
    'AG&>': 'AC',
    'AG&=': 'AC',
    'AG&.': 'AC',
    'AG&,': 'AC',
    'AG&;': 'AC',
    'AG&:': 'AC',
    'AG&(': 'AC',
    'AG&)': 'AC',
    'AG&[': 'AC',
    'AG&]': 'AC',
    'AG&\n': 'AC',
    'AG&\t': 'AC',
    'AG& ': 'AC',
    'AG&0': 'C',
    'AG&1': 'C',
    'AG&2': 'C',
    'AG&3': 'C',
    'AG&4': 'C',
    'AG&5': 'C',
    'AG&6': 'C',
    'AG&7': 'C',
    'AG&8': 'C',
    'AG&9': 'C',
    'AG&\'': 'AC',
    'AH&a': 'C',
    'AH&b': 'C',
    'AH&c': 'C',
    'AH&d': 'C',
    'AH&e': 'C',
    'AH&f': 'C',
    'AH&g': 'C',
    'AH&h': 'C',
    'AH&i': 'C',
    'AH&j': 'C',
    'AH&k': 'C',
    'AH&l': 'C',
    'AH&m': 'C',
    'AH&n': 'C',
    'AH&o': 'BC',
    'AH&p': 'C',
    'AH&q': 'C',
    'AH&r': 'C',
    'AH&s': 'C',
    'AH&t': 'C',
    'AH&u': 'C',
    'AH&v': 'C',
    'AH&w': 'C',
    'AH&x': 'C',
    'AH&y': 'C',
    'AH&z': 'C',
    'AH&_': 'C',
    'AH&<': 'AC',
    'AH&-': 'AC',
    'AH&+': 'AC',
    'AH&/': 'AC',
    'AH&*': 'AC',
    'AH&^': 'AC',
    'AH&>': 'AC',
    'AH&=': 'AC',
    'AH&.': 'AC',
    'AH&,': 'AC',
    'AH&;': 'AC',
    'AH&:': 'AC',
    'AH&(': 'AC',
    'AH&)': 'AC',
    'AH&[': 'AC',
    'AH&]': 'AC',
    'AH&\n': 'AC',
    'AH&\t': 'AC',
    'AH& ': 'AC',
    'AH&0': 'C',
    'AH&1': 'C',
    'AH&2': 'C',
    'AH&3': 'C',
    'AH&4': 'C',
    'AH&5': 'C',
    'AH&6': 'C',
    'AH&7': 'C',
    'AH&8': 'C',
    'AH&9': 'C',
    'AH&\'': 'AC',
    'AI&a': 'C',
    'AI&b': 'C',
    'AI&c': 'C',
    'AI&d': 'C',
    'AI&e': 'C',
    'AI&f': 'C',
    'AI&g': 'C',
    'AI&h': 'C',
    'AI&i': 'BD',
    'AI&j': 'C',
    'AI&k': 'C',
    'AI&l': 'C',
    'AI&m': 'C',
    'AI&n': 'C',
    'AI&o': 'C',
    'AI&p': 'C',
    'AI&q': 'C',
    'AI&r': 'C',
    'AI&s': 'C',
    'AI&t': 'BE',
    'AI&u': 'C',
    'AI&v': 'C',
    'AI&w': 'C',
    'AI&x': 'C',
    'AI&y': 'C',
    'AI&z': 'C',
    'AI&_': 'C',
    'AI&<': 'AC',
    'AI&-': 'AC',
    'AI&+': 'AC',
    'AI&/': 'AC',
    'AI&*': 'AC',
    'AI&^': 'AC',
    'AI&>': 'AC',
    'AI&=': 'AC',
    'AI&.': 'AC',
    'AI&,': 'AC',
    'AI&;': 'AC',
    'AI&:': 'AC',
    'AI&(': 'AC',
    'AI&)': 'AC',
    'AI&[': 'AC',
    'AI&]': 'AC',
    'AI&\n': 'AC',
    'AI&\t': 'AC',
    'AI& ': 'AC',
    'AI&0': 'C',
    'AI&1': 'C',
    'AI&2': 'C',
    'AI&3': 'C',
    'AI&4': 'C',
    'AI&5': 'C',
    'AI&6': 'C',
    'AI&7': 'C',
    'AI&8': 'C',
    'AI&9': 'C',
    'AI&\'': 'AC',
    'AJ&a': 'C',
    'AJ&b': 'C',
    'AJ&c': 'C',
    'AJ&d': 'C',
    'AJ&e': 'C',
    'AJ&f': 'C',
    'AJ&g': 'C',
    'AJ&h': 'C',
    'AJ&i': 'C',
    'AJ&j': 'C',
    'AJ&k': 'C',
    'AJ&l': 'C',
    'AJ&m': 'C',
    'AJ&n': 'C',
    'AJ&o': 'BF',
    'AJ&p': 'C',
    'AJ&q': 'C',
    'AJ&r': 'C',
    'AJ&s': 'C',
    'AJ&t': 'C',
    'AJ&u': 'C',
    'AJ&v': 'C',
    'AJ&w': 'C',
    'AJ&x': 'C',
    'AJ&y': 'C',
    'AJ&z': 'C',
    'AJ&_': 'C',
    'AJ&<': 'AC',
    'AJ&-': 'AC',
    'AJ&+': 'AC',
    'AJ&/': 'AC',
    'AJ&*': 'AC',
    'AJ&^': 'AC',
    'AJ&>': 'AC',
    'AJ&=': 'AC',
    'AJ&.': 'AC',
    'AJ&,': 'AC',
    'AJ&;': 'AC',
    'AJ&:': 'AC',
    'AJ&(': 'AC',
    'AJ&)': 'AC',
    'AJ&[': 'AC',
    'AJ&]': 'AC',
    'AJ&\n': 'AC',
    'AJ&\t': 'AC',
    'AJ& ': 'AC',
    'AJ&0': 'C',
    'AJ&1': 'C',
    'AJ&2': 'C',
    'AJ&3': 'C',
    'AJ&4': 'C',
    'AJ&5': 'C',
    'AJ&6': 'C',
    'AJ&7': 'C',
    'AJ&8': 'C',
    'AJ&9': 'C',
    'AJ&\'': 'AC',
    'AK&a': 'C',
    'AK&b': 'C',
    'AK&c': 'C',
    'AK&d': 'C',
    'AK&e': 'C',
    'AK&f': 'C',
    'AK&g': 'C',
    'AK&h': 'C',
    'AK&i': 'C',
    'AK&j': 'C',
    'AK&k': 'C',
    'AK&l': 'C',
    'AK&m': 'C',
    'AK&n': 'C',
    'AK&o': 'C',
    'AK&p': 'BG',
    'AK&q': 'C',
    'AK&r': 'C',
    'AK&s': 'C',
    'AK&t': 'C',
    'AK&u': 'C',
    'AK&v': 'C',
    'AK&w': 'C',
    'AK&x': 'C',
    'AK&y': 'C',
    'AK&z': 'C',
    'AK&_': 'C',
    'AK&<': 'AC',
    'AK&-': 'AC',
    'AK&+': 'AC',
    'AK&/': 'AC',
    'AK&*': 'AC',
    'AK&^': 'AC',
    'AK&>': 'AC',
    'AK&=': 'AC',
    'AK&.': 'AC',
    'AK&,': 'AC',
    'AK&;': 'AC',
    'AK&:': 'AC',
    'AK&(': 'AC',
    'AK&)': 'AC',
    'AK&[': 'AC',
    'AK&]': 'AC',
    'AK&\n': 'AC',
    'AK&\t': 'AC',
    'AK& ': 'AC',
    'AK&0': 'C',
    'AK&1': 'C',
    'AK&2': 'C',
    'AK&3': 'C',
    'AK&4': 'C',
    'AK&5': 'C',
    'AK&6': 'C',
    'AK&7': 'C',
    'AK&8': 'C',
    'AK&9': 'C',
    'AK&\'': 'AC',
    'AL&a': 'C',
    'AL&b': 'C',
    'AL&c': 'C',
    'AL&d': 'C',
    'AL&e': 'C',
    'AL&f': 'C',
    'AL&g': 'C',
    'AL&h': 'C',
    'AL&i': 'C',
    'AL&j': 'C',
    'AL&k': 'C',
    'AL&l': 'C',
    'AL&m': 'C',
    'AL&n': 'BH',
    'AL&o': 'C',
    'AL&p': 'C',
    'AL&q': 'C',
    'AL&r': 'C',
    'AL&s': 'C',
    'AL&t': 'C',
    'AL&u': 'C',
    'AL&v': 'C',
    'AL&w': 'C',
    'AL&x': 'C',
    'AL&y': 'C',
    'AL&z': 'C',
    'AL&_': 'C',
    'AL&<': 'BI',
    'AL&-': 'BI',
    'AL&+': 'BI',
    'AL&/': 'BI',
    'AL&*': 'BI',
    'AL&^': 'BI',
    'AL&>': 'BI',
    'AL&=': 'BI',
    'AL&.': 'BI',
    'AL&,': 'BI',
    'AL&;': 'BI',
    'AL&:': 'BI',
    'AL&(': 'BI',
    'AL&)': 'BI',
    'AL&[': 'BI',
    'AL&]': 'BI',
    'AL&\n': 'BI',
    'AL&\t': 'BI',
    'AL& ': 'BI',
    'AL&0': 'C',
    'AL&1': 'C',
    'AL&2': 'C',
    'AL&3': 'C',
    'AL&4': 'C',
    'AL&5': 'C',
    'AL&6': 'C',
    'AL&7': 'C',
    'AL&8': 'C',
    'AL&9': 'C',
    'AL&\'': 'BI',
    'AN&-':'BJ',
    'AU&a': 'ER',
    'AU&b': 'ER',
    'AU&c': 'ER',
    'AU&d': 'ER',
    'AU&e': 'ER',
    'AU&f': 'ER',
    'AU&g': 'ER',
    'AU&h': 'ER',
    'AU&i': 'ER',
    'AU&j': 'ER',
    'AU&k': 'ER',
    'AU&l': 'ER',
    'AU&m': 'ER',
    'AU&n': 'ER',
    'AU&o': 'ER',
    'AU&p': 'ER',
    'AU&q': 'ER',
    'AU&r': 'ER',
    'AU&s': 'ER',
    'AU&t': 'ER',
    'AU&u': 'ER',
    'AU&v': 'ER',
    'AU&w': 'ER',
    'AU&x': 'ER',
    'AU&y': 'ER',
    'AU&z': 'ER',
    'AU&_': 'ER',
    'AU&<': 'ER',
    'AU&-': 'ER',
    'AU&+': 'ER',
    'AU&/': 'ER',
    'AU&*': 'ER',
    'AU&^': 'ER',
    'AU&>': 'ER',
    'AU&=': 'ER',
    'AU&.': 'ER',
    'AU&,': 'ER',
    'AU&;': 'ER',
    'AU&:': 'ER',
    'AU&(': 'ER',
    'AU&)': 'ER',
    'AU&[': 'ER',
    'AU&]': 'ER',
    'AU&\n': 'ER',
    'AU&\t': 'ER',
    'AU& ': 'ER',
    'AU&0': 'BK',
    'AU&1': 'BK',
    'AU&2': 'BK',
    'AU&3': 'BK',
    'AU&4': 'BK',
    'AU&5': 'BK',
    'AU&6': 'BK',
    'AU&7': 'BK',
    'AU&8': 'BK',
    'AU&9': 'BK',
    'AU&\'': 'ER',
    'AV&a': 'ER',
    'AV&b': 'ER',
    'AV&c': 'ER',
    'AV&d': 'ER',
    'AV&e': 'ER',
    'AV&f': 'ER',
    'AV&g': 'ER',
    'AV&h': 'ER',
    'AV&i': 'ER',
    'AV&j': 'ER',
    'AV&k': 'ER',
    'AV&l': 'ER',
    'AV&m': 'ER',
    'AV&n': 'ER',
    'AV&o': 'ER',
    'AV&p': 'ER',
    'AV&q': 'ER',
    'AV&r': 'ER',
    'AV&s': 'ER',
    'AV&t': 'ER',
    'AV&u': 'ER',
    'AV&v': 'ER',
    'AV&w': 'ER',
    'AV&x': 'ER',
    'AV&y': 'ER',
    'AV&z': 'ER',
    'AV&_': 'ER',
    'AV&<': 'ER',
    'AV&-': 'ER',
    'AV&+': 'ER',
    'AV&/': 'ER',
    'AV&*': 'ER',
    'AV&^': 'ER',
    'AV&>': 'ER',
    'AV&=': 'ER',
    'AV&.': 'ER',
    'AV&,': 'ER',
    'AV&;': 'ER',
    'AV&:': 'ER',
    'AV&(': 'ER',
    'AV&)': 'ER',
    'AV&[': 'ER',
    'AV&]': 'ER',
    'AV&\n': 'ER',
    'AV&\t': 'ER',
    'AV& ': 'ER',
    'AV&0': 'ER',
    'AV&1': 'ER',
    'AV&2': 'ER',
    'AV&3': 'ER',
    'AV&4': 'ER',
    'AV&5': 'ER',
    'AV&6': 'ER',
    'AV&7': 'ER',
    'AV&8': 'ER',
    'AV&9': 'ER',
    'AV&\'': 'BL',
    'AW&a': 'C',
    'AW&b': 'C',
    'AW&c': 'C',
    'AW&d': 'C',
    'AW&e': 'C',
    'AW&f': 'C',
    'AW&g': 'C',
    'AW&h': 'C',
    'AW&i': 'C',
    'AW&j': 'C',
    'AW&k': 'C',
    'AW&l': 'C',
    'AW&m': 'C',
    'AW&n': 'C',
    'AW&o': 'C',
    'AW&p': 'C',
    'AW&q': 'C',
    'AW&r': 'C',
    'AW&s': 'C',
    'AW&t': 'C',
    'AW&u': 'C',
    'AW&v': 'C',
    'AW&w': 'C',
    'AW&x': 'C',
    'AW&y': 'C',
    'AW&z': 'C',
    'AW&_': 'C',
    'AW&<': 'BM',
    'AW&-': 'BM',
    'AW&+': 'BM',
    'AW&/': 'BM',
    'AW&*': 'BM',
    'AW&^': 'BM',
    'AW&>': 'BM',
    'AW&=': 'BM',
    'AW&.': 'BM',
    'AW&,': 'BM',
    'AW&;': 'BM',
    'AW&:': 'BM',
    'AW&(': 'BM',
    'AW&)': 'BM',
    'AW&[': 'BM',
    'AW&]': 'BM',
    'AW&\n': 'BM',
    'AW&\t': 'BM',
    'AW& ': 'BM',
    'AW&0': 'C',
    'AW&1': 'C',
    'AW&2': 'C',
    'AW&3': 'C',
    'AW&4': 'C',
    'AW&5': 'C',
    'AW&6': 'C',
    'AW&7': 'C',
    'AW&8': 'C',
    'AW&9': 'C',
    'AW&\'': 'BM',
    'AY&a': 'C',
    'AY&b': 'C',
    'AY&c': 'C',
    'AY&d': 'C',
    'AY&e': 'C',
    'AY&f': 'C',
    'AY&g': 'C',
    'AY&h': 'C',
    'AY&i': 'C',
    'AY&j': 'C',
    'AY&k': 'C',
    'AY&l': 'C',
    'AY&m': 'C',
    'AY&n': 'C',
    'AY&o': 'C',
    'AY&p': 'C',
    'AY&q': 'C',
    'AY&r': 'BN',
    'AY&s': 'C',
    'AY&t': 'C',
    'AY&u': 'C',
    'AY&v': 'C',
    'AY&w': 'C',
    'AY&x': 'C',
    'AY&y': 'C',
    'AY&z': 'C',
    'AY&_': 'C',
    'AY&<': 'AC',
    'AY&-': 'AC',
    'AY&+': 'AC',
    'AY&/': 'AC',
    'AY&*': 'AC',
    'AY&^': 'AC',
    'AY&>': 'AC',
    'AY&=': 'AC',
    'AY&.': 'AC',
    'AY&,': 'AC',
    'AY&;': 'AC',
    'AY&:': 'AC',
    'AY&(': 'AC',
    'AY&)': 'AC',
    'AY&[': 'AC',
    'AY&]': 'AC',
    'AY&\n': 'AC',
    'AY&\t': 'AC',
    'AY& ': 'AC',
    'AY&0': 'C',
    'AY&1': 'C',
    'AY&2': 'C',
    'AY&3': 'C',
    'AY&4': 'C',
    'AY&5': 'C',
    'AY&6': 'C',
    'AY&7': 'C',
    'AY&8': 'C',
    'AY&9': 'C',
    'AY&\'': 'AC',
    'AX&a': 'C',
    'AX&b': 'C',
    'AX&c': 'C',
    'AX&d': 'C',
    'AX&e': 'C',
    'AX&f': 'C',
    'AX&g': 'C',
    'AX&h': 'C',
    'AX&i': 'C',
    'AX&j': 'C',
    'AX&k': 'C',
    'AX&l': 'C',
    'AX&m': 'C',
    'AX&n': 'C',
    'AX&o': 'C',
    'AX&p': 'C',
    'AX&q': 'C',
    'AX&r': 'C',
    'AX&s': 'C',
    'AX&t': 'C',
    'AX&u': 'BO',
    'AX&v': 'C',
    'AX&w': 'C',
    'AX&x': 'C',
    'AX&y': 'C',
    'AX&z': 'C',
    'AX&_': 'C',
    'AX&<': 'AC',
    'AX&-': 'AC',
    'AX&+': 'AC',
    'AX&/': 'AC',
    'AX&*': 'AC',
    'AX&^': 'AC',
    'AX&>': 'AC',
    'AX&=': 'AC',
    'AX&.': 'AC',
    'AX&,': 'AC',
    'AX&;': 'AC',
    'AX&:': 'AC',
    'AX&(': 'AC',
    'AX&)': 'AC',
    'AX&[': 'AC',
    'AX&]': 'AC',
    'AX&\n': 'AC',
    'AX&\t': 'AC',
    'AX& ': 'AC',
    'AX&0': 'C',
    'AX&1': 'C',
    'AX&2': 'C',
    'AX&3': 'C',
    'AX&4': 'C',
    'AX&5': 'C',
    'AX&6': 'C',
    'AX&7': 'C',
    'AX&8': 'C',
    'AX&9': 'C',
    'AX&\'': 'AC',
    'AZ&a': 'AZZ',
    'AZ&b': 'C',
    'AZ&c': 'C',
    'AZ&d': 'C',
    'AZ&e': 'C',
    'AZ&f': 'C',
    'AZ&g': 'C',
    'AZ&h': 'C',
    'AZ&i': 'C',
    'AZ&j': 'C',
    'AZ&k': 'C',
    'AZ&l': 'C',
    'AZ&m': 'C',
    'AZ&n': 'C',
    'AZ&o': 'C',
    'AZ&p': 'C',
    'AZ&q': 'C',
    'AZ&r': 'C',
    'AZ&s': 'C',
    'AZ&t': 'C',
    'AZ&u': 'C',
    'AZ&v': 'C',
    'AZ&w': 'C',
    'AZ&x': 'C',
    'AZ&y': 'C',
    'AZ&z': 'C',
    'AZ&_': 'C',
    'AZ&<': 'AC',
    'AZ&-': 'AC',
    'AZ&+': 'AC',
    'AZ&/': 'AC',
    'AZ&*': 'AC',
    'AZ&^': 'AC',
    'AZ&>': 'AC',
    'AZ&=': 'AC',
    'AZ&.': 'AC',
    'AZ&,': 'AC',
    'AZ&;': 'AC',
    'AZ&:': 'AC',
    'AZ&(': 'AC',
    'AZ&)': 'AC',
    'AZ&[': 'AC',
    'AZ&]': 'AC',
    'AZ&\n': 'AC',
    'AZ&\t': 'AC',
    'AZ& ': 'AC',
    'AZ&0': 'C',
    'AZ&1': 'C',
    'AZ&2': 'C',
    'AZ&3': 'C',
    'AZ&4': 'C',
    'AZ&5': 'C',
    'AZ&6': 'C',
    'AZ&7': 'C',
    'AZ&8': 'C',
    'AZ&9': 'C',
    'AZ&\'': 'AC',
    'AZZ&a':'C',
    'AZZ&b':'C',
    'AZZ&c':'C',
    'AZZ&d':'C',
    'AZZ&e':'C',
    'AZZ&f':'C',
    'AZZ&g':'C',
    'AZZ&h':'C',
    'AZZ&i':'C',
    'AZZ&j':'C',
    'AZZ&k':'C',
    'AZZ&l':'C',
    'AZZ&m':'C',
    'AZZ&n':'C',
    'AZZ&o':'BP',
    'AZZ&p':'C',
    'AZZ&q':'C',
    'AZZ&r':'C',
    'AZZ&s':'C',
    'AZZ&t':'C',
    'AZZ&u':'C',
    'AZZ&v':'C',
    'AZZ&w':'C',
    'AZZ&x':'C',
    'AZZ&y':'C',
    'AZZ&z':'C',
    'AZZ&_':'C',
    'AZZ&<':'C',
    'AZZ&-':'C',
    'AZZ&+':'C',
    'AZZ&/':'C',
    'AZZ&*':'C',
    'AZZ&^':'C',
    'AZZ&>':'C',
    'AZZ&=':'C',
    'AZZ&.':'C',
    'AZZ&,':'C',
    'AZZ&;':'C',
    'AZZ&(':'C',
    'AZZ&)':'C',
    'AZZ&[':'C',
    'AZZ&]':'X',
    'AZZ&\n':'C',
    'AZZ&\t':'C',
    'AZZ& ':'C',
    'AZZ&0':'C',
    'AZZ&1':'C',
    'AZZ&2':'C',
    'AZZ&3':'C',
    'AZZ&4':'C',
    'AZZ&5':'C',
    'AZZ&6':'C',
    'AZZ&7':'C',
    'AZZ&8':'C',
    'AZZ&9':'C',
    'AZZ&\'':'C',
    'BA&a': 'BQ',
    'BA&b': 'C',
    'BA&c': 'C',
    'BA&d': 'C',
    'BA&e': 'C',
    'BA&f': 'C',
    'BA&g': 'C',
    'BA&h': 'C',
    'BA&i': 'C',
    'BA&j': 'C',
    'BA&k': 'C',
    'BA&l': 'C',
    'BA&m': 'C',
    'BA&n': 'C',
    'BA&o': 'C',
    'BA&p': 'C',
    'BA&q': 'C',
    'BA&r': 'C',
    'BA&s': 'C',
    'BA&t': 'C',
    'BA&u': 'C',
    'BA&v': 'C',
    'BA&w': 'C',
    'BA&x': 'C',
    'BA&y': 'C',
    'BA&z': 'C',
    'BA&_': 'C',
    'BA&<': 'AC',
    'BA&-': 'AC',
    'BA&+': 'AC',
    'BA&/': 'AC',
    'BA&*': 'AC',
    'BA&^': 'AC',
    'BA&>': 'AC',
    'BA&=': 'AC',
    'BA&.': 'AC',
    'BA&,': 'AC',
    'BA&;': 'AC',
    'BA&:': 'AC',
    'BA&(': 'AC',
    'BA&)': 'AC',
    'BA&[': 'AC',
    'BA&]': 'AC',
    'BA&\n': 'AC',
    'BA&\t': 'AC',
    'BA& ': 'AC',
    'BA&0': 'C',
    'BA&1': 'C',
    'BA&2': 'C',
    'BA&3': 'C',
    'BA&4': 'C',
    'BA&5': 'C',
    'BA&6': 'C',
    'BA&7': 'C',
    'BA&8': 'C',
    'BA&9': 'C',
    'BA&\'': 'AC',
    'BB&a': 'C',
    'BB&b': 'C',
    'BB&c': 'C',
    'BB&d': 'C',
    'BB&e': 'C',
    'BB&f': 'C',
    'BB&g': 'C',
    'BB&h': 'C',
    'BB&i': 'C',
    'BB&j': 'C',
    'BB&k': 'C',
    'BB&l': 'C',
    'BB&m': 'C',
    'BB&n': 'C',
    'BB&o': 'C',
    'BB&p': 'C',
    'BB&q': 'C',
    'BB&r': 'C',
    'BB&s': 'C',
    'BB&t': 'C',
    'BB&u': 'C',
    'BB&v': 'C',
    'BB&w': 'C',
    'BB&x': 'C',
    'BB&y': 'C',
    'BB&z': 'C',
    'BB&_': 'C',
    'BB&<': 'BR',
    'BB&-': 'BR',
    'BB&+': 'BR',
    'BB&/': 'BR',
    'BB&*': 'BR',
    'BB&^': 'BR',
    'BB&>': 'BR',
    'BB&=': 'BR',
    'BB&.': 'BR',
    'BB&,': 'BR',
    'BB&;': 'BR',
    'BB&:': 'BR',
    'BB&(': 'BR',
    'BB&)': 'BR',
    'BB&[': 'BR',
    'BB&]': 'BR',
    'BB&\n': 'BR',
    'BB&\t': 'BR',
    'BB& ': 'BR',
    'BB&0': 'C',
    'BB&1': 'C',
    'BB&2': 'C',
    'BB&3': 'C',
    'BB&4': 'C',
    'BB&5': 'C',
    'BB&6': 'C',
    'BB&7': 'C',
    'BB&8': 'C',
    'BB&9': 'C',
    'BB&\'': 'BR',
    'BC&a': 'BS',
    'BC&b': 'C',
    'BC&c': 'C',
    'BC&d': 'C',
    'BC&e': 'C',
    'BC&f': 'C',
    'BC&g': 'C',
    'BC&h': 'C',
    'BC&i': 'C',
    'BC&j': 'C',
    'BC&k': 'C',
    'BC&l': 'C',
    'BC&m': 'C',
    'BC&n': 'C',
    'BC&o': 'C',
    'BC&p': 'C',
    'BC&q': 'C',
    'BC&r': 'C',
    'BC&s': 'C',
    'BC&t': 'C',
    'BC&u': 'C',
    'BC&v': 'C',
    'BC&w': 'C',
    'BC&x': 'C',
    'BC&y': 'C',
    'BC&z': 'C',
    'BC&_': 'C',
    'BC&<': 'AC',
    'BC&-': 'AC',
    'BC&+': 'AC',
    'BC&/': 'AC',
    'BC&*': 'AC',
    'BC&^': 'AC',
    'BC&>': 'AC',
    'BC&=': 'AC',
    'BC&.': 'AC',
    'BC&,': 'AC',
    'BC&;': 'AC',
    'BC&:': 'AC',
    'BC&(': 'AC',
    'BC&)': 'AC',
    'BC&[': 'AC',
    'BC&]': 'AC',
    'BC&\n': 'AC',
    'BC&\t': 'AC',
    'BC& ': 'AC',
    'BC&0': 'C',
    'BC&1': 'C',
    'BC&2': 'C',
    'BC&3': 'C',
    'BC&4': 'C',
    'BC&5': 'C',
    'BC&6': 'C',
    'BC&7': 'C',
    'BC&8': 'C',
    'BC&9': 'C',
    'BC&\'': 'AC',
    'BD&a': 'C',
    'BD&b': 'C',
    'BD&c': 'BT',
    'BD&d': 'C',
    'BD&e': 'C',
    'BD&f': 'C',
    'BD&g': 'C',
    'BD&h': 'C',
    'BD&i': 'C',
    'BD&j': 'C',
    'BD&k': 'C',
    'BD&l': 'C',
    'BD&m': 'C',
    'BD&n': 'C',
    'BD&o': 'C',
    'BD&p': 'C',
    'BD&q': 'C',
    'BD&r': 'C',
    'BD&s': 'C',
    'BD&t': 'C',
    'BD&u': 'C',
    'BD&v': 'C',
    'BD&w': 'C',
    'BD&x': 'C',
    'BD&y': 'C',
    'BD&z': 'C',
    'BD&_': 'C',
    'BD&<': 'AC',
    'BD&-': 'AC',
    'BD&+': 'AC',
    'BD&/': 'AC',
    'BD&*': 'AC',
    'BD&^': 'AC',
    'BD&>': 'AC',
    'BD&=': 'AC',
    'BD&.': 'AC',
    'BD&,': 'AC',
    'BD&;': 'AC',
    'BD&:': 'AC',
    'BD&(': 'AC',
    'BD&)': 'AC',
    'BD&[': 'AC',
    'BD&]': 'AC',
    'BD&\n': 'AC',
    'BD&\t': 'AC',
    'BD& ': 'AC',
    'BD&0': 'C',
    'BD&1': 'C',
    'BD&2': 'C',
    'BD&3': 'C',
    'BD&4': 'C',
    'BD&5': 'C',
    'BD&6': 'C',
    'BD&7': 'C',
    'BD&8': 'C',
    'BD&9': 'C',
    'BD&\'': 'AC',
    'BE&a': 'C',
    'BE&b': 'C',
    'BE&c': 'C',
    'BE&d': 'C',
    'BE&e': 'C',
    'BE&f': 'C',
    'BE&g': 'C',
    'BE&h': 'C',
    'BE&i': 'C',
    'BE&j': 'C',
    'BE&k': 'C',
    'BE&l': 'C',
    'BE&m': 'C',
    'BE&n': 'C',
    'BE&o': 'C',
    'BE&p': 'C',
    'BE&q': 'C',
    'BE&r': 'C',
    'BE&s': 'C',
    'BE&t': 'C',
    'BE&u': 'C',
    'BE&v': 'C',
    'BE&w': 'C',
    'BE&x': 'C',
    'BE&y': 'C',
    'BE&z': 'C',
    'BE&_': 'C',
    'BE&<': 'BU',
    'BE&-': 'BU',
    'BE&+': 'BU',
    'BE&/': 'BU',
    'BE&*': 'BU',
    'BE&^': 'BU',
    'BE&>': 'BU',
    'BE&=': 'BU',
    'BE&.': 'BU',
    'BE&,': 'BU',
    'BE&;': 'BU',
    'BE&:': 'BU',
    'BE&(': 'BU',
    'BE&)': 'BU',
    'BE&[': 'BU',
    'BE&]': 'BU',
    'BE&\n': 'BU',
    'BE&\t': 'BU',
    'BE& ': 'BU',
    'BE&0': 'C',
    'BE&1': 'C',
    'BE&2': 'C',
    'BE&3': 'C',
    'BE&4': 'C',
    'BE&5': 'C',
    'BE&6': 'C',
    'BE&7': 'C',
    'BE&8': 'C',
    'BE&9': 'C',
    'BE&\'': 'BU',
    'BF&a': 'C',
    'BF&b': 'C',
    'BF&c': 'C',
    'BF&d': 'C',
    'BF&e': 'C',
    'BF&f': 'C',
    'BF&g': 'BV',
    'BF&h': 'C',
    'BF&i': 'C',
    'BF&j': 'C',
    'BF&k': 'C',
    'BF&l': 'C',
    'BF&m': 'C',
    'BF&n': 'C',
    'BF&o': 'C',
    'BF&p': 'C',
    'BF&q': 'C',
    'BF&r': 'C',
    'BF&s': 'C',
    'BF&t': 'C',
    'BF&u': 'C',
    'BF&v': 'C',
    'BF&w': 'C',
    'BF&x': 'C',
    'BF&y': 'C',
    'BF&z': 'C',
    'BF&_': 'C',
    'BF&<': 'AC',
    'BF&-': 'AC',
    'BF&+': 'AC',
    'BF&/': 'AC',
    'BF&*': 'AC',
    'BF&^': 'AC',
    'BF&>': 'AC',
    'BF&=': 'AC',
    'BF&.': 'AC',
    'BF&,': 'AC',
    'BF&;': 'AC',
    'BF&:': 'AC',
    'BF&(': 'AC',
    'BF&)': 'AC',
    'BF&[': 'AC',
    'BF&]': 'AC',
    'BF&\n': 'AC',
    'BF&\t': 'AC',
    'BF& ': 'AC',
    'BF&0': 'C',
    'BF&1': 'C',
    'BF&2': 'C',
    'BF&3': 'C',
    'BF&4': 'C',
    'BF&5': 'C',
    'BF&6': 'C',
    'BF&7': 'C',
    'BF&8': 'C',
    'BF&9': 'C',
    'BF&\'': 'AC',
    'BG&a': 'C',
    'BG&b': 'C',
    'BG&c': 'C',
    'BG&d': 'C',
    'BG&e': 'C',
    'BG&f': 'C',
    'BG&g': 'C',
    'BG&h': 'C',
    'BG&i': 'BW',
    'BG&j': 'C',
    'BG&k': 'C',
    'BG&l': 'C',
    'BG&m': 'C',
    'BG&n': 'C',
    'BG&o': 'C',
    'BG&p': 'C',
    'BG&q': 'C',
    'BG&r': 'C',
    'BG&s': 'C',
    'BG&t': 'C',
    'BG&u': 'C',
    'BG&v': 'C',
    'BG&w': 'C',
    'BG&x': 'C',
    'BG&y': 'C',
    'BG&z': 'C',
    'BG&_': 'C',
    'BG&<': 'AC',
    'BG&-': 'AC',
    'BG&+': 'AC',
    'BG&/': 'AC',
    'BG&*': 'AC',
    'BG&^': 'AC',
    'BG&>': 'AC',
    'BG&=': 'AC',
    'BG&.': 'AC',
    'BG&,': 'AC',
    'BG&;': 'AC',
    'BG&:': 'AC',
    'BG&(': 'AC',
    'BG&)': 'AC',
    'BG&[': 'AC',
    'BG&]': 'AC',
    'BG&\n': 'AC',
    'BG&\t': 'AC',
    'BG& ': 'AC',
    'BG&0': 'C',
    'BG&1': 'C',
    'BG&2': 'C',
    'BG&3': 'C',
    'BG&4': 'C',
    'BG&5': 'C',
    'BG&6': 'C',
    'BG&7': 'C',
    'BG&8': 'C',
    'BG&9': 'C',
    'BG&\'': 'AC',
    'BH&a': 'BX',
    'BH&b': 'C',
    'BH&c': 'C',
    'BH&d': 'C',
    'BH&e': 'C',
    'BH&f': 'C',
    'BH&g': 'C',
    'BH&h': 'C',
    'BH&i': 'C',
    'BH&j': 'C',
    'BH&k': 'C',
    'BH&l': 'C',
    'BH&m': 'C',
    'BH&n': 'C',
    'BH&o': 'C',
    'BH&p': 'C',
    'BH&q': 'C',
    'BH&r': 'C',
    'BH&s': 'C',
    'BH&t': 'C',
    'BH&u': 'C',
    'BH&v': 'C',
    'BH&w': 'C',
    'BH&x': 'C',
    'BH&y': 'C',
    'BH&z': 'C',
    'BH&_': 'C',
    'BH&<': 'AC',
    'BH&-': 'AC',
    'BH&+': 'AC',
    'BH&/': 'AC',
    'BH&*': 'AC',
    'BH&^': 'AC',
    'BH&>': 'AC',
    'BH&=': 'AC',
    'BH&.': 'AC',
    'BH&,': 'AC',
    'BH&;': 'AC',
    'BH&:': 'AC',
    'BH&(': 'AC',
    'BH&)': 'AC',
    'BH&[': 'AC',
    'BH&]': 'AC',
    'BH&\n': 'AC',
    'BH&\t': 'AC',
    'BH& ': 'AC',
    'BH&0': 'C',
    'BH&1': 'C',
    'BH&2': 'C',
    'BH&3': 'C',
    'BH&4': 'C',
    'BH&5': 'C',
    'BH&6': 'C',
    'BH&7': 'C',
    'BH&8': 'C',
    'BH&9': 'C',
    'BH&\'': 'AC',
    'BJ&a': 'BY',
    'BJ&b': 'BY',
    'BJ&c': 'BY',
    'BJ&d': 'BY',
    'BJ&e': 'BY',
    'BJ&f': 'BY',
    'BJ&g': 'BY',
    'BJ&h': 'BY',
    'BJ&i': 'BY',
    'BJ&j': 'BY',
    'BJ&k': 'BY',
    'BJ&l': 'BY',
    'BJ&m': 'BY',
    'BJ&n': 'BY',
    'BJ&o': 'BY',
    'BJ&p': 'BY',
    'BJ&q': 'BY',
    'BJ&r': 'BY',
    'BJ&s': 'BY',
    'BJ&t': 'BY',
    'BJ&u': 'BY',
    'BJ&v': 'BY',
    'BJ&w': 'BY',
    'BJ&x': 'BY',
    'BJ&y': 'BY',
    'BJ&z': 'BY',
    'BJ&_': 'BY',
    'BJ&<': 'BY',
    'BJ&-': 'BY',
    'BJ&+': 'BY',
    'BJ&/': 'BY',
    'BJ&*': 'BY',
    'BJ&^': 'BY',
    'BJ&>': 'BY',
    'BJ&=': 'BY',
    'BJ&.': 'BY',
    'BJ&,': 'BY',
    'BJ&;': 'BY',
    'BJ&:': 'BY',
    'BJ&(': 'BY',
    'BJ&)': 'BY',
    'BJ&[': 'BY',
    'BJ&]': 'BY',
    'BJ&\n': 'BY',
    'BJ&\t': 'BY',
    'BJ& ': 'BY',
    'BJ&0': 'BY',
    'BJ&1': 'BY',
    'BJ&2': 'BY',
    'BJ&3': 'BY',
    'BJ&4': 'BY',
    'BJ&5': 'BY',
    'BJ&6': 'BY',
    'BJ&7': 'BY',
    'BJ&8': 'BY',
    'BJ&9': 'BY',
    'BJ&\'': 'BY',
    'BK&a': 'CA',
    'BK&b': 'CA',
    'BK&c': 'CA',
    'BK&d': 'CA',
    'BK&e': 'BZ',
    'BK&f': 'CA',
    'BK&g': 'CA',
    'BK&h': 'CA',
    'BK&i': 'CA',
    'BK&j': 'CA',
    'BK&k': 'CA',
    'BK&l': 'CA',
    'BK&m': 'CA',
    'BK&n': 'CA',
    'BK&o': 'CA',
    'BK&p': 'CA',
    'BK&q': 'CA',
    'BK&r': 'CA',
    'BK&s': 'CA',
    'BK&t': 'CA',
    'BK&u': 'CA',
    'BK&v': 'CA',
    'BK&w': 'CA',
    'BK&x': 'CA',
    'BK&y': 'CA',
    'BK&z': 'CA',
    'BK&_': 'CA',
    'BK&<': 'CA',
    'BK&-': 'CA',
    'BK&+': 'CA',
    'BK&/': 'CA',
    'BK&*': 'CA',
    'BK&^': 'CA',
    'BK&>': 'CA',
    'BK&=': 'CA',
    'BK&.': 'CA',
    'BK&,': 'CA',
    'BK&;': 'CA',
    'BK&:': 'CA',
    'BK&(': 'CA',
    'BK&)': 'CA',
    'BK&[': 'CA',
    'BK&]': 'CA',
    'BK&\n': 'CA',
    'BK&\t': 'CA',
    'BK& ': 'CA',
    'BK&0': 'BK',
    'BK&1': 'BK',
    'BK&2': 'BK',
    'BK&3': 'BK',
    'BK&4': 'BK',
    'BK&5': 'BK',
    'BK&6': 'BK',
    'BK&7': 'BK',
    'BK&8': 'BK',
    'BK&9': 'BK',
    'BK&\'': 'CA',
    'BM&a': 'C',
    'BM&b': 'C',
    'BM&c': 'C',
    'BM&d': 'C',
    'BM&e': 'C',
    'BM&f': 'C',
    'BM&g': 'C',
    'BM&h': 'C',
    'BM&i': 'C',
    'BM&j': 'C',
    'BM&k': 'C',
    'BM&l': 'C',
    'BM&m': 'C',
    'BM&n': 'C',
    'BM&o': 'C',
    'BM&p': 'C',
    'BM&q': 'C',
    'BM&r': 'C',
    'BM&s': 'C',
    'BM&t': 'C',
    'BM&u': 'C',
    'BM&v': 'C',
    'BM&w': 'C',
    'BM&x': 'C',
    'BM&y': 'C',
    'BM&z': 'C',
    'BM&_': 'C',
    'BM&<': 'AC',
    'BM&-': 'AC',
    'BM&+': 'AC',
    'BM&/': 'AC',
    'BM&*': 'AC',
    'BM&^': 'AC',
    'BM&>': 'AC',
    'BM&=': 'AC',
    'BM&.': 'AC',
    'BM&,': 'AC',
    'BM&;': 'AC',
    'BM&:': 'AC',
    'BM&(': 'AC',
    'BM&)': 'AC',
    'BM&[': 'AC',
    'BM&]': 'AC',
    'BM&\n': 'AC',
    'BM&\t': 'AC',
    'BM& ': 'AC',
    'BM&0': 'C',
    'BM&1': 'C',
    'BM&2': 'C',
    'BM&3': 'C',
    'BM&4': 'C',
    'BM&5': 'C',
    'BM&6': 'C',
    'BM&7': 'C',
    'BM&8': 'C',
    'BM&9': 'C',
    'BM&\'': 'AC',
    'BN&a': 'C',
    'BN&b': 'C',
    'BN&c': 'C',
    'BN&d': 'C',
    'BN&e': 'C',
    'BN&f': 'C',
    'BN&g': 'C',
    'BN&h': 'C',
    'BN&i': 'C',
    'BN&j': 'C',
    'BN&k': 'C',
    'BN&l': 'C',
    'BN&m': 'C',
    'BN&n': 'C',
    'BN&o': 'C',
    'BN&p': 'C',
    'BN&q': 'C',
    'BN&r': 'C',
    'BN&s': 'C',
    'BN&t': 'C',
    'BN&u': 'C',
    'BN&v': 'C',
    'BN&w': 'C',
    'BN&x': 'C',
    'BN&y': 'C',
    'BN&z': 'C',
    'BN&_': 'C',
    'BN&<': 'CB',
    'BN&-': 'CB',
    'BN&+': 'CB',
    'BN&/': 'CB',
    'BN&*': 'CB',
    'BN&^': 'CB',
    'BN&>': 'CB',
    'BN&=': 'CB',
    'BN&.': 'CB',
    'BN&,': 'CB',
    'BN&;': 'CB',
    'BN&:': 'CB',
    'BN&(': 'CB',
    'BN&)': 'CB',
    'BN&[': 'CB',
    'BN&]': 'CB',
    'BN&\n': 'CB',
    'BN&\t': 'CB',
    'BN& ': 'CB',
    'BN&0': 'C',
    'BN&1': 'C',
    'BN&2': 'C',
    'BN&3': 'C',
    'BN&4': 'C',
    'BN&5': 'C',
    'BN&6': 'C',
    'BN&7': 'C',
    'BN&8': 'C',
    'BN&9': 'C',
    'BN&\'': 'CB',
    'BO&a': 'CC',
    'BO&b': 'C',
    'BO&c': 'C',
    'BO&d': 'C',
    'BO&e': 'C',
    'BO&f': 'C',
    'BO&g': 'C',
    'BO&h': 'C',
    'BO&i': 'C',
    'BO&j': 'C',
    'BO&k': 'C',
    'BO&l': 'C',
    'BO&m': 'C',
    'BO&n': 'C',
    'BO&o': 'C',
    'BO&p': 'C',
    'BO&q': 'C',
    'BO&r': 'C',
    'BO&s': 'C',
    'BO&t': 'C',
    'BO&u': 'C',
    'BO&v': 'C',
    'BO&w': 'C',
    'BO&x': 'C',
    'BO&y': 'C',
    'BO&z': 'C',
    'BO&_': 'C',
    'BO&<': 'AC',
    'BO&-': 'AC',
    'BO&+': 'AC',
    'BO&/': 'AC',
    'BO&*': 'AC',
    'BO&^': 'AC',
    'BO&>': 'AC',
    'BO&=': 'AC',
    'BO&.': 'AC',
    'BO&,': 'AC',
    'BO&;': 'AC',
    'BO&:': 'AC',
    'BO&(': 'AC',
    'BO&)': 'AC',
    'BO&[': 'AC',
    'BO&]': 'AC',
    'BO&\n': 'AC',
    'BO&\t': 'AC',
    'BO& ': 'AC',
    'BO&0': 'C',
    'BO&1': 'C',
    'BO&2': 'C',
    'BO&3': 'C',
    'BO&4': 'C',
    'BO&5': 'C',
    'BO&6': 'C',
    'BO&7': 'C',
    'BO&8': 'C',
    'BO&9': 'C',
    'BO&\'': 'AC',
    'BP&a': 'C',
    'BP&b': 'C',
    'BP&c': 'C',
    'BP&d': 'C',
    'BP&e': 'C',
    'BP&f': 'C',
    'BP&g': 'C',
    'BP&h': 'C',
    'BP&i': 'C',
    'BP&j': 'C',
    'BP&k': 'C',
    'BP&l': 'C',
    'BP&m': 'C',
    'BP&n': 'C',
    'BP&o': 'C',
    'BP&p': 'C',
    'BP&q': 'C',
    'BP&r': 'C',
    'BP&s': 'C',
    'BP&t': 'C',
    'BP&u': 'C',
    'BP&v': 'C',
    'BP&w': 'C',
    'BP&x': 'C',
    'BP&y': 'C',
    'BP&z': 'C',
    'BP&_': 'C',
    'BP&<': 'CD',
    'BP&-': 'CD',
    'BP&+': 'CD',
    'BP&/': 'CD',
    'BP&*': 'CD',
    'BP&^': 'CD',
    'BP&>': 'CD',
    'BP&=': 'CD',
    'BP&.': 'CD',
    'BP&,': 'CD',
    'BP&;': 'CD',
    'BP&:': 'CD',
    'BP&(': 'CD',
    'BP&)': 'CD',
    'BP&[': 'CD',
    'BP&]': 'CD',
    'BP&\n': 'CD',
    'BP&\t': 'CD',
    'BP& ': 'CD',
    'BP&0': 'C',
    'BP&1': 'C',
    'BP&2': 'C',
    'BP&3': 'C',
    'BP&4': 'C',
    'BP&5': 'C',
    'BP&6': 'C',
    'BP&7': 'C',
    'BP&8': 'C',
    'BP&9': 'C',
    'BP&\'': 'CD',
    'BQ&a': 'C',
    'BQ&b': 'C',
    'BQ&c': 'C',
    'BQ&d': 'C',
    'BQ&e': 'C',
    'BQ&f': 'C',
    'BQ&g': 'C',
    'BQ&h': 'C',
    'BQ&i': 'C',
    'BQ&j': 'C',
    'BQ&k': 'C',
    'BQ&l': 'C',
    'BQ&m': 'C',
    'BQ&n': 'C',
    'BQ&o': 'C',
    'BQ&p': 'C',
    'BQ&q': 'C',
    'BQ&r': 'C',
    'BQ&s': 'C',
    'BQ&t': 'C',
    'BQ&u': 'C',
    'BQ&v': 'C',
    'BQ&w': 'C',
    'BQ&x': 'C',
    'BQ&y': 'C',
    'BQ&z': 'C',
    'BQ&_': 'C',
    'BQ&<': 'CE',
    'BQ&-': 'CE',
    'BQ&+': 'CE',
    'BQ&/': 'CE',
    'BQ&*': 'CE',
    'BQ&^': 'CE',
    'BQ&>': 'CE',
    'BQ&=': 'CE',
    'BQ&.': 'CE',
    'BQ&,': 'CE',
    'BQ&;': 'CE',
    'BQ&:': 'CE',
    'BQ&(': 'CE',
    'BQ&)': 'CE',
    'BQ&[': 'CE',
    'BQ&]': 'CE',
    'BQ&\n': 'CE',
    'BQ&\t': 'CE',
    'BQ& ': 'CE',
    'BQ&0': 'C',
    'BQ&1': 'C',
    'BQ&2': 'C',
    'BQ&3': 'C',
    'BQ&4': 'C',
    'BQ&5': 'C',
    'BQ&6': 'C',
    'BQ&7': 'C',
    'BQ&8': 'C',
    'BQ&9': 'C',
    'BQ&\'': 'CE',
    'BS&a': 'C',
    'BS&b': 'C',
    'BS&c': 'C',
    'BS&d': 'C',
    'BS&e': 'C',
    'BS&f': 'C',
    'BS&g': 'C',
    'BS&h': 'C',
    'BS&i': 'C',
    'BS&j': 'C',
    'BS&k': 'C',
    'BS&l': 'C',
    'BS&m': 'C',
    'BS&n': 'C',
    'BS&o': 'C',
    'BS&p': 'C',
    'BS&q': 'C',
    'BS&r': 'C',
    'BS&s': 'C',
    'BS&t': 'CF',
    'BS&u': 'C',
    'BS&v': 'C',
    'BS&w': 'C',
    'BS&x': 'C',
    'BS&y': 'C',
    'BS&z': 'C',
    'BS&_': 'C',
    'BS&<': 'AC',
    'BS&-': 'AC',
    'BS&+': 'AC',
    'BS&/': 'AC',
    'BS&*': 'AC',
    'BS&^': 'AC',
    'BS&>': 'AC',
    'BS&=': 'AC',
    'BS&.': 'AC',
    'BS&,': 'AC',
    'BS&;': 'AC',
    'BS&:': 'AC',
    'BS&(': 'AC',
    'BS&)': 'AC',
    'BS&[': 'AC',
    'BS&]': 'AC',
    'BS&\n': 'AC',
    'BS&\t': 'AC',
    'BS& ': 'AC',
    'BS&0': 'C',
    'BS&1': 'C',
    'BS&2': 'C',
    'BS&3': 'C',
    'BS&4': 'C',
    'BS&5': 'C',
    'BS&6': 'C',
    'BS&7': 'C',
    'BS&8': 'C',
    'BS&9': 'C',
    'BS&\'': 'AC',
    'BT&a': 'C',
    'BT&b': 'C',
    'BT&c': 'C',
    'BT&d': 'C',
    'BT&e': 'C',
    'BT&f': 'C',
    'BT&g': 'C',
    'BT&h': 'C',
    'BT&i': 'CG',
    'BT&j': 'C',
    'BT&k': 'C',
    'BT&l': 'C',
    'BT&m': 'C',
    'BT&n': 'C',
    'BT&o': 'C',
    'BT&p': 'C',
    'BT&q': 'C',
    'BT&r': 'C',
    'BT&s': 'C',
    'BT&t': 'C',
    'BT&u': 'C',
    'BT&v': 'C',
    'BT&w': 'C',
    'BT&x': 'C',
    'BT&y': 'C',
    'BT&z': 'C',
    'BT&_': 'C',
    'BT&<': 'AC',
    'BT&-': 'AC',
    'BT&+': 'AC',
    'BT&/': 'AC',
    'BT&*': 'AC',
    'BT&^': 'AC',
    'BT&>': 'AC',
    'BT&=': 'AC',
    'BT&.': 'AC',
    'BT&,': 'AC',
    'BT&;': 'AC',
    'BT&:': 'AC',
    'BT&(': 'AC',
    'BT&)': 'AC',
    'BT&[': 'AC',
    'BT&]': 'AC',
    'BT&\n': 'AC',
    'BT&\t': 'AC',
    'BT& ': 'AC',
    'BT&0': 'C',
    'BT&1': 'C',
    'BT&2': 'C',
    'BT&3': 'C',
    'BT&4': 'C',
    'BT&5': 'C',
    'BT&6': 'C',
    'BT&7': 'C',
    'BT&8': 'C',
    'BT&9': 'C',
    'BT&\'': 'AC',
    'BV&a': 'C',
    'BV&b': 'C',
    'BV&c': 'C',
    'BV&d': 'C',
    'BV&e': 'C',
    'BV&f': 'C',
    'BV&g': 'C',
    'BV&h': 'C',
    'BV&i': 'C',
    'BV&j': 'C',
    'BV&k': 'C',
    'BV&l': 'C',
    'BV&m': 'C',
    'BV&n': 'C',
    'BV&o': 'C',
    'BV&p': 'C',
    'BV&q': 'C',
    'BV&r': 'CH',
    'BV&s': 'C',
    'BV&t': 'C',
    'BV&u': 'C',
    'BV&v': 'C',
    'BV&w': 'C',
    'BV&x': 'C',
    'BV&y': 'C',
    'BV&z': 'C',
    'BV&_': 'C',
    'BV&<': 'AC',
    'BV&-': 'AC',
    'BV&+': 'AC',
    'BV&/': 'AC',
    'BV&*': 'AC',
    'BV&^': 'AC',
    'BV&>': 'AC',
    'BV&=': 'AC',
    'BV&.': 'AC',
    'BV&,': 'AC',
    'BV&;': 'AC',
    'BV&:': 'AC',
    'BV&(': 'AC',
    'BV&)': 'AC',
    'BV&[': 'AC',
    'BV&]': 'AC',
    'BV&\n': 'AC',
    'BV&\t': 'AC',
    'BV& ': 'AC',
    'BV&0': 'C',
    'BV&1': 'C',
    'BV&2': 'C',
    'BV&3': 'C',
    'BV&4': 'C',
    'BV&5': 'C',
    'BV&6': 'C',
    'BV&7': 'C',
    'BV&8': 'C',
    'BV&9': 'C',
    'BV&\'': 'AC',
    'BW&a': 'C',
    'BW&b': 'C',
    'BW&c': 'C',
    'BW&d': 'C',
    'BW&e': 'C',
    'BW&f': 'C',
    'BW&g': 'C',
    'BW&h': 'C',
    'BW&i': 'C',
    'BW&j': 'C',
    'BW&k': 'C',
    'BW&l': 'C',
    'BW&m': 'C',
    'BW&n': 'C',
    'BW&o': 'C',
    'BW&p': 'C',
    'BW&q': 'C',
    'BW&r': 'C',
    'BW&s': 'C',
    'BW&t': 'CI',
    'BW&u': 'C',
    'BW&v': 'C',
    'BW&w': 'C',
    'BW&x': 'C',
    'BW&y': 'C',
    'BW&z': 'C',
    'BW&_': 'C',
    'BW&<': 'AC',
    'BW&-': 'AC',
    'BW&+': 'AC',
    'BW&/': 'AC',
    'BW&*': 'AC',
    'BW&^': 'AC',
    'BW&>': 'AC',
    'BW&=': 'AC',
    'BW&.': 'AC',
    'BW&,': 'AC',
    'BW&;': 'AC',
    'BW&:': 'AC',
    'BW&(': 'AC',
    'BW&)': 'AC',
    'BW&[': 'AC',
    'BW&]': 'AC',
    'BW&\n': 'AC',
    'BW&\t': 'AC',
    'BW& ': 'AC',
    'BW&0': 'C',
    'BW&1': 'C',
    'BW&2': 'C',
    'BW&3': 'C',
    'BW&4': 'C',
    'BW&5': 'C',
    'BW&6': 'C',
    'BW&7': 'C',
    'BW&8': 'C',
    'BW&9': 'C',
    'BW&\'': 'AC',
    'BX&a': 'C',
    'BX&b': 'C',
    'BX&c': 'C',
    'BX&d': 'C',
    'BX&e': 'C',
    'BX&f': 'C',
    'BX&g': 'C',
    'BX&h': 'C',
    'BX&i': 'C',
    'BX&j': 'C',
    'BX&k': 'C',
    'BX&l': 'C',
    'BX&m': 'C',
    'BX&n': 'C',
    'BX&o': 'CJ',
    'BX&p': 'C',
    'BX&q': 'C',
    'BX&r': 'C',
    'BX&s': 'C',
    'BX&t': 'C',
    'BX&u': 'C',
    'BX&v': 'C',
    'BX&w': 'C',
    'BX&x': 'C',
    'BX&y': 'C',
    'BX&z': 'C',
    'BX&_': 'C',
    'BX&<': 'AC',
    'BX&-': 'AC',
    'BX&+': 'AC',
    'BX&/': 'AC',
    'BX&*': 'AC',
    'BX&^': 'AC',
    'BX&>': 'AC',
    'BX&=': 'AC',
    'BX&.': 'AC',
    'BX&,': 'AC',
    'BX&;': 'AC',
    'BX&:': 'AC',
    'BX&(': 'AC',
    'BX&)': 'AC',
    'BX&[': 'AC',
    'BX&]': 'AC',
    'BX&\n': 'AC',
    'BX&\t': 'AC',
    'BX& ': 'AC',
    'BX&0': 'C',
    'BX&1': 'C',
    'BX&2': 'C',
    'BX&3': 'C',
    'BX&4': 'C',
    'BX&5': 'C',
    'BX&6': 'C',
    'BX&7': 'C',
    'BX&8': 'C',
    'BX&9': 'C',
    'BX&\'': 'AC',
    'BZ&a': 'ER',
    'BZ&b': 'ER',
    'BZ&c': 'ER',
    'BZ&d': 'ER',
    'BZ&e': 'ER',
    'BZ&f': 'ER',
    'BZ&g': 'ER',
    'BZ&h': 'ER',
    'BZ&i': 'ER',
    'BZ&j': 'ER',
    'BZ&k': 'ER',
    'BZ&l': 'ER',
    'BZ&m': 'ER',
    'BZ&n': 'ER',
    'BZ&o': 'ER',
    'BZ&p': 'ER',
    'BZ&q': 'ER',
    'BZ&r': 'ER',
    'BZ&s': 'ER',
    'BZ&t': 'ER',
    'BZ&u': 'ER',
    'BZ&v': 'ER',
    'BZ&w': 'ER',
    'BZ&x': 'ER',
    'BZ&y': 'ER',
    'BZ&z': 'ER',
    'BZ&_': 'ER',
    'BZ&<': 'ER',
    'BZ&-': 'CK',
    'BZ&+': 'CK',
    'BZ&/': 'ER',
    'BZ&*': 'ER',
    'BZ&^': 'ER',
    'BZ&>': 'ER',
    'BZ&=': 'ER',
    'BZ&.': 'ER',
    'BZ&,': 'ER',
    'BZ&;': 'ER',
    'BZ&:': 'ER',
    'BZ&(': 'ER',
    'BZ&)': 'ER',
    'BZ&[': 'ER',
    'BZ&]': 'ER',
    'BZ&\n': 'ER',
    'BZ&\t': 'ER',
    'BZ& ': 'ER',
    'BZ&0': 'CL',
    'BZ&1': 'CL',
    'BZ&2': 'CL',
    'BZ&3': 'CL',
    'BZ&4': 'CL',
    'BZ&5': 'CL',
    'BZ&6': 'CL',
    'BZ&7': 'CL',
    'BZ&8': 'CL',
    'BZ&9': 'CL',
    'BZ&\'': 'ER',
    'CC&a': 'C',
    'CC&b': 'C',
    'CC&c': 'C',
    'CC&d': 'C',
    'CC&e': 'C',
    'CC&f': 'C',
    'CC&g': 'C',
    'CC&h': 'C',
    'CC&i': 'C',
    'CC&j': 'C',
    'CC&k': 'C',
    'CC&l': 'C',
    'CC&m': 'C',
    'CC&n': 'CM',
    'CC&o': 'C',
    'CC&p': 'C',
    'CC&q': 'C',
    'CC&r': 'C',
    'CC&s': 'C',
    'CC&t': 'C',
    'CC&u': 'C',
    'CC&v': 'C',
    'CC&w': 'C',
    'CC&x': 'C',
    'CC&y': 'C',
    'CC&z': 'C',
    'CC&_': 'C',
    'CC&<': 'AC',
    'CC&-': 'AC',
    'CC&+': 'AC',
    'CC&/': 'AC',
    'CC&*': 'AC',
    'CC&^': 'AC',
    'CC&>': 'AC',
    'CC&=': 'AC',
    'CC&.': 'AC',
    'CC&,': 'AC',
    'CC&;': 'AC',
    'CC&:': 'AC',
    'CC&(': 'AC',
    'CC&)': 'AC',
    'CC&[': 'AC',
    'CC&]': 'AC',
    'CC&\n': 'AC',
    'CC&\t': 'AC',
    'CC& ': 'AC',
    'CC&0': 'C',
    'CC&1': 'C',
    'CC&2': 'C',
    'CC&3': 'C',
    'CC&4': 'C',
    'CC&5': 'C',
    'CC&6': 'C',
    'CC&7': 'C',
    'CC&8': 'C',
    'CC&9': 'C',
    'CC&\'': 'AC',
    'CF&a': 'C',
    'CF&b': 'C',
    'CF&c': 'C',
    'CF&d': 'C',
    'CF&e': 'C',
    'CF&f': 'C',
    'CF&g': 'C',
    'CF&h': 'C',
    'CF&i': 'C',
    'CF&j': 'C',
    'CF&k': 'C',
    'CF&l': 'C',
    'CF&m': 'C',
    'CF&n': 'C',
    'CF&o': 'C',
    'CF&p': 'C',
    'CF&q': 'C',
    'CF&r': 'C',
    'CF&s': 'C',
    'CF&t': 'C',
    'CF&u': 'C',
    'CF&v': 'C',
    'CF&w': 'C',
    'CF&x': 'C',
    'CF&y': 'C',
    'CF&z': 'C',
    'CF&_': 'C',
    'CF&<': 'CN',
    'CF&-': 'CN',
    'CF&+': 'CN',
    'CF&/': 'CN',
    'CF&*': 'CN',
    'CF&^': 'CN',
    'CF&>': 'CN',
    'CF&=': 'CN',
    'CF&.': 'CN',
    'CF&,': 'CN',
    'CF&;': 'CN',
    'CF&:': 'CN',
    'CF&(': 'CN',
    'CF&)': 'CN',
    'CF&[': 'CN',
    'CF&]': 'CN',
    'CF&\n': 'CN',
    'CF&\t': 'CN',
    'CF& ': 'CN',
    'CF&0': 'C',
    'CF&1': 'C',
    'CF&2': 'C',
    'CF&3': 'C',
    'CF&4': 'C',
    'CF&5': 'C',
    'CF&6': 'C',
    'CF&7': 'C',
    'CF&8': 'C',
    'CF&9': 'C',
    'CF&\'': 'CN',
    'CG&a': 'C',
    'CG&b': 'C',
    'CG&c': 'C',
    'CG&d': 'C',
    'CG&e': 'C',
    'CG&f': 'C',
    'CG&g': 'C',
    'CG&h': 'C',
    'CG&i': 'C',
    'CG&j': 'C',
    'CG&k': 'C',
    'CG&l': 'C',
    'CG&m': 'C',
    'CG&n': 'C',
    'CG&o': 'CO',
    'CG&p': 'C',
    'CG&q': 'C',
    'CG&r': 'C',
    'CG&s': 'C',
    'CG&t': 'C',
    'CG&u': 'C',
    'CG&v': 'C',
    'CG&w': 'C',
    'CG&x': 'C',
    'CG&y': 'C',
    'CG&z': 'C',
    'CG&_': 'C',
    'CG&<': 'AC',
    'CG&-': 'AC',
    'CG&+': 'AC',
    'CG&/': 'AC',
    'CG&*': 'AC',
    'CG&^': 'AC',
    'CG&>': 'AC',
    'CG&=': 'AC',
    'CG&.': 'AC',
    'CG&,': 'AC',
    'CG&;': 'AC',
    'CG&:': 'AC',
    'CG&(': 'AC',
    'CG&)': 'AC',
    'CG&[': 'AC',
    'CG&]': 'AC',
    'CG&\n': 'AC',
    'CG&\t': 'AC',
    'CG& ': 'AC',
    'CG&0': 'C',
    'CG&1': 'C',
    'CG&2': 'C',
    'CG&3': 'C',
    'CG&4': 'C',
    'CG&5': 'C',
    'CG&6': 'C',
    'CG&7': 'C',
    'CG&8': 'C',
    'CG&9': 'C',
    'CG&\'': 'AC',
    'CH&a': 'CP',
    'CH&b': 'C',
    'CH&c': 'C',
    'CH&d': 'C',
    'CH&e': 'C',
    'CH&f': 'C',
    'CH&g': 'C',
    'CH&h': 'C',
    'CH&i': 'C',
    'CH&j': 'C',
    'CH&k': 'C',
    'CH&l': 'C',
    'CH&m': 'C',
    'CH&n': 'C',
    'CH&o': 'C',
    'CH&p': 'C',
    'CH&q': 'C',
    'CH&r': 'C',
    'CH&s': 'C',
    'CH&t': 'C',
    'CH&u': 'C',
    'CH&v': 'C',
    'CH&w': 'C',
    'CH&x': 'C',
    'CH&y': 'C',
    'CH&z': 'C',
    'CH&_': 'C',
    'CH&<': 'AC',
    'CH&-': 'AC',
    'CH&+': 'AC',
    'CH&/': 'AC',
    'CH&*': 'AC',
    'CH&^': 'AC',
    'CH&>': 'AC',
    'CH&=': 'AC',
    'CH&.': 'AC',
    'CH&,': 'AC',
    'CH&;': 'AC',
    'CH&:': 'AC',
    'CH&(': 'AC',
    'CH&)': 'AC',
    'CH&[': 'AC',
    'CH&]': 'AC',
    'CH&\n': 'AC',
    'CH&\t': 'AC',
    'CH& ': 'AC',
    'CH&0': 'C',
    'CH&1': 'C',
    'CH&2': 'C',
    'CH&3': 'C',
    'CH&4': 'C',
    'CH&5': 'C',
    'CH&6': 'C',
    'CH&7': 'C',
    'CH&8': 'C',
    'CH&9': 'C',
    'CH&\'': 'AC',
    'CI&a': 'CQ',
    'CI&b': 'C',
    'CI&c': 'C',
    'CI&d': 'C',
    'CI&e': 'C',
    'CI&f': 'C',
    'CI&g': 'C',
    'CI&h': 'C',
    'CI&i': 'C',
    'CI&j': 'C',
    'CI&k': 'C',
    'CI&l': 'C',
    'CI&m': 'C',
    'CI&n': 'C',
    'CI&o': 'C',
    'CI&p': 'C',
    'CI&q': 'C',
    'CI&r': 'C',
    'CI&s': 'C',
    'CI&t': 'C',
    'CI&u': 'C',
    'CI&v': 'C',
    'CI&w': 'C',
    'CI&x': 'C',
    'CI&y': 'C',
    'CI&z': 'C',
    'CI&_': 'C',
    'CI&<': 'AC',
    'CI&-': 'AC',
    'CI&+': 'AC',
    'CI&/': 'AC',
    'CI&*': 'AC',
    'CI&^': 'AC',
    'CI&>': 'AC',
    'CI&=': 'AC',
    'CI&.': 'AC',
    'CI&,': 'AC',
    'CI&;': 'AC',
    'CI&:': 'AC',
    'CI&(': 'AC',
    'CI&)': 'AC',
    'CI&[': 'AC',
    'CI&]': 'AC',
    'CI&\n': 'AC',
    'CI&\t': 'AC',
    'CI& ': 'AC',
    'CI&0': 'C',
    'CI&1': 'C',
    'CI&2': 'C',
    'CI&3': 'C',
    'CI&4': 'C',
    'CI&5': 'C',
    'CI&6': 'C',
    'CI&7': 'C',
    'CI&8': 'C',
    'CI&9': 'C',
    'CI&\'': 'AC',
    'CJ&a': 'C',
    'CJ&b': 'C',
    'CJ&c': 'C',
    'CJ&d': 'C',
    'CJ&e': 'C',
    'CJ&f': 'C',
    'CJ&g': 'C',
    'CJ&h': 'C',
    'CJ&i': 'C',
    'CJ&j': 'C',
    'CJ&k': 'C',
    'CJ&l': 'C',
    'CJ&m': 'C',
    'CJ&n': 'C',
    'CJ&o': 'C',
    'CJ&p': 'C',
    'CJ&q': 'C',
    'CJ&r': 'C',
    'CJ&s': 'C',
    'CJ&t': 'C',
    'CJ&u': 'C',
    'CJ&v': 'C',
    'CJ&w': 'C',
    'CJ&x': 'C',
    'CJ&y': 'C',
    'CJ&z': 'C',
    'CJ&_': 'C',
    'CJ&<': 'CR',
    'CJ&-': 'CR',
    'CJ&+': 'CR',
    'CJ&/': 'CR',
    'CJ&*': 'CR',
    'CJ&^': 'CR',
    'CJ&>': 'CR',
    'CJ&=': 'CR',
    'CJ&.': 'CR',
    'CJ&,': 'CR',
    'CJ&;': 'CR',
    'CJ&:': 'CR',
    'CJ&(': 'CR',
    'CJ&)': 'CR',
    'CJ&[': 'CR',
    'CJ&]': 'CR',
    'CJ&\n': 'CR',
    'CJ&\t': 'CR',
    'CJ& ': 'CR',
    'CJ&0': 'C',
    'CJ&1': 'C',
    'CJ&2': 'C',
    'CJ&3': 'C',
    'CJ&4': 'C',
    'CJ&5': 'C',
    'CJ&6': 'C',
    'CJ&7': 'C',
    'CJ&8': 'C',
    'CJ&9': 'C',
    'CJ&\'': 'CR',
    'CK&a': 'ER',
    'CK&b': 'ER',
    'CK&c': 'ER',
    'CK&d': 'ER',
    'CK&e': 'ER',
    'CK&f': 'ER',
    'CK&g': 'ER',
    'CK&h': 'ER',
    'CK&i': 'ER',
    'CK&j': 'ER',
    'CK&k': 'ER',
    'CK&l': 'ER',
    'CK&m': 'ER',
    'CK&n': 'ER',
    'CK&o': 'ER',
    'CK&p': 'ER',
    'CK&q': 'ER',
    'CK&r': 'ER',
    'CK&s': 'ER',
    'CK&t': 'ER',
    'CK&u': 'ER',
    'CK&v': 'ER',
    'CK&w': 'ER',
    'CK&x': 'ER',
    'CK&y': 'ER',
    'CK&z': 'ER',
    'CK&_': 'ER',
    'CK&<': 'ER',
    'CK&-': 'ER',
    'CK&+': 'ER',
    'CK&/': 'ER',
    'CK&*': 'ER',
    'CK&^': 'ER',
    'CK&>': 'ER',
    'CK&=': 'ER',
    'CK&.': 'ER',
    'CK&,': 'ER',
    'CK&;': 'ER',
    'CK&:': 'ER',
    'CK&(': 'ER',
    'CK&)': 'ER',
    'CK&[': 'ER',
    'CK&]': 'ER',
    'CK&\n': 'ER',
    'CK&\t': 'ER',
    'CK& ': 'ER',
    'CK&0': 'CL',
    'CK&1': 'CL',
    'CK&2': 'CL',
    'CK&3': 'CL',
    'CK&4': 'CL',
    'CK&5': 'CL',
    'CK&6': 'CL',
    'CK&7': 'CL',
    'CK&8': 'CL',
    'CK&9': 'CL',
    'CK&\'': 'ER',
    'CL&a': 'CS',
    'CL&b': 'CS',
    'CL&c': 'CS',
    'CL&d': 'CS',
    'CL&e': 'CS',
    'CL&f': 'CS',
    'CL&g': 'CS',
    'CL&h': 'CS',
    'CL&i': 'CS',
    'CL&j': 'CS',
    'CL&k': 'CS',
    'CL&l': 'CS',
    'CL&m': 'CS',
    'CL&n': 'CS',
    'CL&o': 'CS',
    'CL&p': 'CS',
    'CL&q': 'CS',
    'CL&r': 'CS',
    'CL&s': 'CS',
    'CL&t': 'CS',
    'CL&u': 'CS',
    'CL&v': 'CS',
    'CL&w': 'CS',
    'CL&x': 'CS',
    'CL&y': 'CS',
    'CL&z': 'CS',
    'CL&_': 'CS',
    'CL&<': 'CS',
    'CL&-': 'CS',
    'CL&+': 'CS',
    'CL&/': 'CS',
    'CL&*': 'CS',
    'CL&^': 'CS',
    'CL&>': 'CS',
    'CL&=': 'CS',
    'CL&.': 'CS',
    'CL&,': 'CS',
    'CL&;': 'CS',
    'CL&:': 'CS',
    'CL&(': 'CS',
    'CL&)': 'CS',
    'CL&[': 'CS',
    'CL&]': 'CS',
    'CL&\n': 'CS',
    'CL&\t': 'CS',
    'CL& ': 'CS',
    'CL&0': 'CL',
    'CL&1': 'CL',
    'CL&2': 'CL',
    'CL&3': 'CL',
    'CL&4': 'CL',
    'CL&5': 'CL',
    'CL&6': 'CL',
    'CL&7': 'CL',
    'CL&8': 'CL',
    'CL&9': 'CL',
    'CL&\'': 'CS',
    'CM&a': 'C',
    'CM&b': 'C',
    'CM&c': 'C',
    'CM&d': 'C',
    'CM&e': 'C',
    'CM&f': 'C',
    'CM&g': 'C',
    'CM&h': 'C',
    'CM&i': 'C',
    'CM&j': 'C',
    'CM&k': 'C',
    'CM&l': 'C',
    'CM&m': 'CV',
    'CM&n': 'C',
    'CM&o': 'C',
    'CM&p': 'C',
    'CM&q': 'C',
    'CM&r': 'C',
    'CM&s': 'C',
    'CM&t': 'CT',
    'CM&u': 'C',
    'CM&v': 'C',
    'CM&w': 'C',
    'CM&x': 'C',
    'CM&y': 'C',
    'CM&z': 'C',
    'CM&_': 'C',
    'CM&<': 'AC',
    'CM&-': 'AC',
    'CM&+': 'AC',
    'CM&/': 'AC',
    'CM&*': 'AC',
    'CM&^': 'AC',
    'CM&>': 'AC',
    'CM&=': 'AC',
    'CM&.': 'AC',
    'CM&,': 'AC',
    'CM&;': 'AC',
    'CM&:': 'AC',
    'CM&(': 'AC',
    'CM&)': 'AC',
    'CM&[': 'AC',
    'CM&]': 'AC',
    'CM&\n': 'AC',
    'CM&\t': 'AC',
    'CM& ': 'AC',
    'CM&0': 'C',
    'CM&1': 'C',
    'CM&2': 'C',
    'CM&3': 'C',
    'CM&4': 'C',
    'CM&5': 'C',
    'CM&6': 'C',
    'CM&7': 'C',
    'CM&8': 'C',
    'CM&9': 'C',
    'CM&\'': 'AC',

    'CO&a': 'C',
    'CO&b': 'C',
    'CO&c': 'C',
    'CO&d': 'C',
    'CO&e': 'C',
    'CO&f': 'C',
    'CO&g': 'C',
    'CO&h': 'C',
    'CO&i': 'C',
    'CO&j': 'C',
    'CO&k': 'C',
    'CO&l': 'C',
    'CO&m': 'C',
    'CO&n': 'C',
    'CO&o': 'C',
    'CO&p': 'C',
    'CO&q': 'C',
    'CO&r': 'C',
    'CO&s': 'C',
    'CO&t': 'C',
    'CO&u': 'C',
    'CO&v': 'C',
    'CO&w': 'C',
    'CO&x': 'C',
    'CO&y': 'C',
    'CO&z': 'C',
    'CO&_': 'C',
    'CO&<': 'CU',
    'CO&-': 'CU',
    'CO&+': 'CU',
    'CO&/': 'CU',
    'CO&*': 'CU',
    'CO&^': 'CU',
    'CO&>': 'CU',
    'CO&=': 'CU',
    'CO&.': 'CU',
    'CO&,': 'CU',
    'CO&;': 'CU',
    'CO&:': 'CU',
    'CO&(': 'CU',
    'CO&)': 'CU',
    'CO&[': 'CU',
    'CO&]': 'CU',
    'CO&\n': 'CU',
    'CO&\t': 'CU',
    'CO& ': 'CU',
    'CO&0': 'C',
    'CO&1': 'C',
    'CO&2': 'C',
    'CO&3': 'C',
    'CO&4': 'C',
    'CO&5': 'C',
    'CO&6': 'C',
    'CO&7': 'C',
    'CO&8': 'C',
    'CO&9': 'C',
    'CO&\'': 'CU',
    'CP&a': 'C',
    'CP&b': 'C',
    'CP&c': 'C',
    'CP&d': 'C',
    'CP&e': 'C',
    'CP&f': 'C',
    'CP&g': 'C',
    'CP&h': 'C',
    'CP&i': 'C',
    'CP&j': 'C',
    'CP&k': 'C',
    'CP&l': 'C',
    'CP&m': 'CV',
    'CP&n': 'C',
    'CP&o': 'C',
    'CP&p': 'C',
    'CP&q': 'C',
    'CP&r': 'C',
    'CP&s': 'C',
    'CP&t': 'C',
    'CP&u': 'C',
    'CP&v': 'C',
    'CP&w': 'C',
    'CP&x': 'C',
    'CP&y': 'C',
    'CP&z': 'C',
    'CP&_': 'C',
    'CP&<': 'AC',
    'CP&-': 'AC',
    'CP&+': 'AC',
    'CP&/': 'AC',
    'CP&*': 'AC',
    'CP&^': 'AC',
    'CP&>': 'AC',
    'CP&=': 'AC',
    'CP&.': 'AC',
    'CP&,': 'AC',
    'CP&;': 'AC',
    'CP&:': 'AC',
    'CP&(': 'AC',
    'CP&)': 'AC',
    'CP&[': 'AC',
    'CP&]': 'AC',
    'CP&\n': 'AC',
    'CP&\t': 'AC',
    'CP& ': 'AC',
    'CP&0': 'C',
    'CP&1': 'C',
    'CP&2': 'C',
    'CP&3': 'C',
    'CP&4': 'C',
    'CP&5': 'C',
    'CP&6': 'C',
    'CP&7': 'C',
    'CP&8': 'C',
    'CP&9': 'C',
    'CP&\'': 'AC',
    'CQ&a': 'C',
    'CQ&b': 'C',
    'CQ&c': 'C',
    'CQ&d': 'C',
    'CQ&e': 'C',
    'CQ&f': 'C',
    'CQ&g': 'C',
    'CQ&h': 'C',
    'CQ&i': 'C',
    'CQ&j': 'C',
    'CQ&k': 'C',
    'CQ&l': 'C',
    'CQ&m': 'C',
    'CQ&n': 'C',
    'CQ&o': 'C',
    'CQ&p': 'C',
    'CQ&q': 'C',
    'CQ&r': 'C',
    'CQ&s': 'C',
    'CQ&t': 'C',
    'CQ&u': 'C',
    'CQ&v': 'C',
    'CQ&w': 'C',
    'CQ&x': 'C',
    'CQ&y': 'C',
    'CQ&z': 'C',
    'CQ&_': 'C',
    'CQ&<': 'CW',
    'CQ&-': 'CW',
    'CQ&+': 'CW',
    'CQ&/': 'CW',
    'CQ&*': 'CW',
    'CQ&^': 'CW',
    'CQ&>': 'CW',
    'CQ&=': 'CW',
    'CQ&.': 'CW',
    'CQ&,': 'CW',
    'CQ&;': 'CW',
    'CQ&:': 'CW',
    'CQ&(': 'CW',
    'CQ&)': 'CW',
    'CQ&[': 'CW',
    'CQ&]': 'CW',
    'CQ&\n': 'CW',
    'CQ&\t': 'CW',
    'CQ& ': 'CW',
    'CQ&0': 'C',
    'CQ&1': 'C',
    'CQ&2': 'C',
    'CQ&3': 'C',
    'CQ&4': 'C',
    'CQ&5': 'C',
    'CQ&6': 'C',
    'CQ&7': 'C',
    'CQ&8': 'C',
    'CQ&9': 'C',
    'CQ&\'': 'CW',
    'CT&a': 'C',
    'CT&b': 'C',
    'CT&c': 'C',
    'CT&d': 'C',
    'CT&e': 'C',
    'CT&f': 'C',
    'CT&g': 'C',
    'CT&h': 'C',
    'CT&i': 'C',
    'CT&j': 'C',
    'CT&k': 'C',
    'CT&l': 'C',
    'CT&m': 'C',
    'CT&n': 'C',
    'CT&o': 'CX',
    'CT&p': 'C',
    'CT&q': 'C',
    'CT&r': 'C',
    'CT&s': 'C',
    'CT&t': 'C',
    'CT&u': 'C',
    'CT&v': 'C',
    'CT&w': 'C',
    'CT&x': 'C',
    'CT&y': 'C',
    'CT&z': 'C',
    'CT&_': 'C',
    'CT&<': 'AC',
    'CT&-': 'AC',
    'CT&+': 'AC',
    'CT&/': 'AC',
    'CT&*': 'AC',
    'CT&^': 'AC',
    'CT&>': 'AC',
    'CT&=': 'AC',
    'CT&.': 'AC',
    'CT&,': 'AC',
    'CT&;': 'AC',
    'CT&:': 'AC',
    'CT&(': 'AC',
    'CT&)': 'AC',
    'CT&[': 'AC',
    'CT&]': 'AC',
    'CT&\n': 'AC',
    'CT&\t': 'AC',
    'CT& ': 'AC',
    'CT&0': 'C',
    'CT&1': 'C',
    'CT&2': 'C',
    'CT&3': 'C',
    'CT&4': 'C',
    'CT&5': 'C',
    'CT&6': 'C',
    'CT&7': 'C',
    'CT&8': 'C',
    'CT&9': 'C',
    'CT&\'': 'AC',
    'CV&a': 'CY',
    'CV&b': 'C',
    'CV&c': 'C',
    'CV&d': 'C',
    'CV&e': 'C',
    'CV&f': 'C',
    'CV&g': 'C',
    'CV&h': 'C',
    'CV&i': 'C',
    'CV&j': 'C',
    'CV&k': 'C',
    'CV&l': 'C',
    'CV&m': 'C',
    'CV&n': 'C',
    'CV&o': 'C',
    'CV&p': 'C',
    'CV&q': 'C',
    'CV&r': 'C',
    'CV&s': 'C',
    'CV&t': 'C',
    'CV&u': 'C',
    'CV&v': 'C',
    'CV&w': 'C',
    'CV&x': 'C',
    'CV&y': 'C',
    'CV&z': 'C',
    'CV&_': 'C',
    'CV&<': 'AC',
    'CV&-': 'AC',
    'CV&+': 'AC',
    'CV&/': 'AC',
    'CV&*': 'AC',
    'CV&^': 'AC',
    'CV&>': 'AC',
    'CV&=': 'AC',
    'CV&.': 'AC',
    'CV&,': 'AC',
    'CV&;': 'AC',
    'CV&:': 'AC',
    'CV&(': 'AC',
    'CV&)': 'AC',
    'CV&[': 'AC',
    'CV&]': 'AC',
    'CV&\n': 'AC',
    'CV&\t': 'AC',
    'CV& ': 'AC',
    'CV&0': 'C',
    'CV&1': 'C',
    'CV&2': 'C',
    'CV&3': 'C',
    'CV&4': 'C',
    'CV&5': 'C',
    'CV&6': 'C',
    'CV&7': 'C',
    'CV&8': 'C',
    'CV&9': 'C',
    'CV&\'': 'AC',
    'CX&a': 'C',
    'CX&b': 'C',
    'CX&c': 'C',
    'CX&d': 'C',
    'CX&e': 'C',
    'CX&f': 'C',
    'CX&g': 'C',
    'CX&h': 'C',
    'CX&i': 'C',
    'CX&j': 'C',
    'CX&k': 'C',
    'CX&l': 'C',
    'CX&m': 'C',
    'CX&n': 'C',
    'CX&o': 'C',
    'CX&p': 'C',
    'CX&q': 'C',
    'CX&r': 'C',
    'CX&s': 'C',
    'CX&t': 'C',
    'CX&u': 'C',
    'CX&v': 'C',
    'CX&w': 'C',
    'CX&x': 'C',
    'CX&y': 'C',
    'CX&z': 'C',
    'CX&_': 'C',
    'CX&<': 'CZ',
    'CX&-': 'CZ',
    'CX&+': 'CZ',
    'CX&/': 'CZ',
    'CX&*': 'CZ',
    'CX&^': 'CZ',
    'CX&>': 'CZ',
    'CX&=': 'CZ',
    'CX&.': 'CZ',
    'CX&,': 'CZ',
    'CX&;': 'CZ',
    'CX&:': 'CZ',
    'CX&(': 'CZ',
    'CX&)': 'CZ',
    'CX&[': 'CZ',
    'CX&]': 'CZ',
    'CX&\n': 'CZ',
    'CX&\t': 'CZ',
    'CX& ': 'CZ',
    'CX&0': 'C',
    'CX&1': 'C',
    'CX&2': 'C',
    'CX&3': 'C',
    'CX&4': 'C',
    'CX&5': 'C',
    'CX&6': 'C',
    'CX&7': 'C',
    'CX&8': 'C',
    'CX&9': 'C',
    'CX&\'': 'CZ',
    'CY&a': 'C',
    'CY&b': 'C',
    'CY&c': 'C',
    'CY&d': 'C',
    'CY&e': 'C',
    'CY&f': 'C',
    'CY&g': 'C',
    'CY&h': 'C',
    'CY&i': 'C',
    'CY&j': 'C',
    'CY&k': 'C',
    'CY&l': 'C',
    'CY&m': 'C',
    'CY&n': 'C',
    'CY&o': 'C',
    'CY&p': 'C',
    'CY&q': 'C',
    'CY&r': 'C',
    'CY&s': 'C',
    'CY&t': 'C',
    'CY&u': 'C',
    'CY&v': 'C',
    'CY&w': 'C',
    'CY&x': 'C',
    'CY&y': 'C',
    'CY&z': 'C',
    'CY&_': 'C',
    'CY&<': 'DA',
    'CY&-': 'DA',
    'CY&+': 'DA',
    'CY&/': 'DA',
    'CY&*': 'DA',
    'CY&^': 'DA',
    'CY&>': 'DA',
    'CY&=': 'DA',
    'CY&.': 'DA',
    'CY&,': 'DA',
    'CY&;': 'DA',
    'CY&:': 'DA',
    'CY&(': 'DA',
    'CY&)': 'DA',
    'CY&[': 'DA',
    'CY&]': 'DA',
    'CY&\n': 'DA',
    'CY&\t': 'DA',
    'CY& ': 'DA',
    'CY&0': 'C',
    'CY&1': 'C',
    'CY&2': 'C',
    'CY&3': 'C',
    'CY&4': 'C',
    'CY&5': 'C',
    'CY&6': 'C',
    'CY&7': 'C',
    'CY&8': 'C',
    'CY&9': 'C',
    'CY&\'': 'DA'
}

def criar_cases():
    finais = ['L', 'M', 'N', 'O', 'P', 'R','RA', 'S', 'T', 'U', 'V', 'X', 'AC', 'AN', 'AM', 'AO', 'AP', 'AQ', 'AR', 'AS',
      'AT', 'BI', 'BL', 'BM', 'BR', 'BU', 'BY', 'CA', 'CB', 'CD', 'CE', 'CN', 'CR', 'CS', 'CU', 'CW', 'CZ', 'DA',
      'ER']
    file = open('cod_direta.py', 'w+')
    file.write(f"linhaGlobal = 0\n")
    file.write(f"colunaGlobal = 0\n")
    file.write(f"tabelaSimbolos = {{}}\n")
    file.write(f"def lex():\n")
    file.write(f"\tstate = 'A'\n")
    file.write(f"\tc = ''\n")
    file.write(f"\tid = ''\n")
    file.write(f"\tglobal linhaGlobal\n")
    file.write(f"\tglobal colunaGlobal\n")
    file.write(f"\tglobal tabelaSimbolos\n")
    file.write(f"\tcoluna = colunaGlobal\n")
    file.write(f"\tlinha = linhaGlobal\n")
    file.write(f"\tlerProx = True\n")
    file.write(f"\twhile True:\n")
    file.write(f"\t\tmatch state:\n")
    estadoAnterior = ''
    finalApareceu = []
    finalTratado = []
    for key, value in diagrama.items():
        key_ = key.split('&')

        if key_[0] != estadoAnterior:
            for final in finalApareceu:
                file.write(f"\t\t\tcase '{final}':\n")
                #file.write(f"\t\t\t\tprint('Tratar retorno estado final {final}')\n")
                file.write(f"\t\t\t\tprint(f\"Identificador montado {{id}}\")\n")
                file.write(f"\t\t\t\tstate = 'A'\n")
                if final != 'AS' and final != 'X' and final != 'ER':
                    if final not in ['AP', 'AO', 'AR','AT','CA','CS','BU', 'CN', 'CB','BL']:
                        file.write(
                            f"\t\t\t\ttipo = 'op_rela' if id in ['=','<','>','<>','<=','>='] else ('op_arit' if id in ['+','-','*','/','^'] else ( id.strip() if id.strip() in ['se','senao','entao','ate','enquanto', 'programa', 'inicio', 'fim','faca','repita'] else  ('identificador' if re.search('[a-zA-Z_]+([a-zA-Z0-9_])*',id.strip()) else ('numero' if re.search('[0-9]([0-9]*)?(.[0-9]([0-9]))?([Ee][+-]?[0-9]([0-9])*)?',id.strip()) else id.strip())))) \n")
                        file.write(f"\t\t\t\tlerProx = False\n")
                        file.write(f"\t\t\t\tif c not in ['\\n', '\\t', ' ','+','-','/',',','*',':',';','(',')','=']:\n")
                        file.write(f"\t\t\t\t\tprint(id)\n")
                        file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo ,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\ttabelaSimbolos[id[:-1]] = Atributo(tipo,id[:-1])\n")
                        file.write(f"\t\t\t\t\treturn Token(tipo,id[:-1],linha,coluna)\n")
                        file.write(f"\t\t\t\telif c in [' ',';',')','+']:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\telse:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                    elif final in ['CA','CS']:
                        file.write(
                            f"\t\t\t\ttipo = 'numero'\n")
                        file.write(f"\t\t\t\tlerProx = False\n")
                        file.write(
                            f"\t\t\t\tif c not in ['\\n', '\\t', ' ','+','-','/',',','*',':',';','(',')','=']:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo ,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\ttabelaSimbolos[id[:-1]] = Atributo(tipo,id[:-1])\n")
                        file.write(f"\t\t\t\t\treturn Token(tipo,id[:-1],linha,coluna)\n")
                        file.write(f"\t\t\t\telif c in [' ',')','+']:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tlerProx = False\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-2)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\telse:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\tprint('voltei uma casa')\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\tprint('nao voltei uma casa')\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                    elif final in ['AT']:
                        file.write(
                            f"\t\t\t\ttipo = 'numero'\n")
                        file.write(f"\t\t\t\tlerProx = False\n")
                        file.write(
                            f"\t\t\t\tif c not in ['\\n', '\\t', ' ','+','-','/',',','*',':',';','(',')','=']:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo ,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\ttabelaSimbolos[id[:-1]] = Atributo(tipo,id[:-1])\n")
                        file.write(f"\t\t\t\t\treturn Token(tipo,id[:-1],linha,coluna)\n")
                        file.write(f"\t\t\t\telif c in [' ',';',')','+']:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tlerProx = False\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\telse:\n")
                        #file.write(f"\t\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\tprint('voltei uma casa')\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\tprint('nao voltei uma casa')\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                    elif final in ['BL']:
                        file.write(
                            f"\t\t\t\ttipo = 'caracter'\n")
                        file.write(f"\t\t\t\tlerProx = False\n")
                        file.write(f"\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                    elif final in ['BU', 'CN', 'CB']:
                        file.write(
                            f"\t\t\t\ttipo = id.strip()\n")
                        file.write(f"\t\t\t\tlerProx = False\n")
                        file.write(
                            f"\t\t\t\tif c not in ['\\n', '\\t', ' ','+','-','/',',','*',':',';','(',')','=']:\n")
                        # file.write(f"\t\t\t\t\tprint(id)\n")
                        # file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo ,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\ttabelaSimbolos[id[:-1]] = Atributo(tipo,id[:-1])\n")
                        file.write(f"\t\t\t\t\treturn Token(tipo,id[:-1],linha,coluna)\n")
                        file.write(f"\t\t\t\telif c in [' ',';',')','+']:\n")
                        # file.write(f"\t\t\t\t\tprint(id)\n")
                        # file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\telse:\n")
                        # file.write(f"\t\t\t\t\tprint(id)\n")
                        # file.write(f"\t\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\t\tif id != c:\n")
                        file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
                        file.write(f"\t\t\t\t\telse:\n")
                        file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
                        file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
                    else:
                        #file.write(f"\t\t\t\tprint(id)\n")
                        #file.write(f"\t\t\t\tprint(c)\n")
                        file.write(f"\t\t\t\ttabelaSimbolos[id.strip()] = Atributo('op_rela',id.strip())\n")
                        file.write(f"\t\t\t\treturn Token('op_rela',id.strip(),linha,coluna)\n")
                elif final == 'X':
                    file.write(f"\t\t\t\tlerProx = True\n")
                elif final == 'ER':
                    file.write(f"\t\t\t\treturn Token('Erro','',linha,colunaGlobal)\n")
                else:
                    file.write(f"\t\t\t\tlerProx = False\n")
                finalTratado.append(final)
                finalApareceu = []

            if key_[0] == 'A':
                file.write(f"\t\t\tcase '{key_[0]}':\n")
                file.write(f"\t\t\t\tif c not in ['\\n', '\\t', ' ']:\n")
                file.write(f"\t\t\t\t\tid = c \n")
                file.write(f"\t\t\t\telse:\n")
                file.write(f"\t\t\t\t\tid = ''\n")
                file.write('\t\t\t\tif lerProx:\n')
                file.write('\t\t\t\t\tc = nextChar()\n')
                file.write('\t\t\t\t\tid += c\n')
                file.write('\t\t\t\t\tcolunaGlobal += 1\n')
                file.write('\t\t\t\telse:\n')
                file.write('\t\t\t\t\tlerProx = True\n')
            else:
                file.write(f"\t\t\tcase '{key_[0]}':\n")
                file.write('\t\t\t\tc = nextChar()\n')
                file.write('\t\t\t\tid += c\n')
                file.write('\t\t\t\tcolunaGlobal += 1\n')
            estadoAnterior = key_[0]

        #print(key)
        caracter = "\\n" if key_[1] == '\n' else ("\\t" if key_[1] == '\t' else ("\\'" if key_[1] == '\'' else key_[1]))

        if key_[1] == 'a' or (key_[0] == 'AN' and key_[1] == '-'):
            file.write(f"\t\t\t\tif c.lower() == '{caracter}':\n")
        else:
            file.write(f"\t\t\t\telif c.lower() == '{caracter}':\n")
            if key_[1] == '\n':
                file.write('\t\t\t\t\tlinhaGlobal += 1\n')
                file.write('\t\t\t\t\tcolunaGlobal = 0\n')
                file.write('\t\t\t\t\tcoluna = 0\n')

        file.write(f"\t\t\t\t\tstate = '{value}'\n")
        file.write(f"\t\t\t\t\tprint(f\"leu caracter {caracter} foi para {value} linha {{linhaGlobal}} colunaG {{colunaGlobal}} coluna {{coluna}}\")\n")

        if key_[0] == 'AN':
            file.write(f"\t\t\t\telse:\n")
            #file.write(f"\t\t\t\t\tprint('Tratar retorno estado final {final}')\n")
            #file.write(f"\t\t\t\t\tprint(f\"Identificador montado {{id}}\")\n")
            file.write(f"\t\t\t\t\tstate = 'A'\n")
            file.write(f"\t\t\t\t\tlerProx = False\n")
            file.write(
                f"\t\t\t\t\ttipo = 'op_rela' if id in ['=','<','>','<>','<=','>=','='] else ('op_arit' if id in ['+','-','*','/','^'] else ( id.strip() if id.strip() in ['se','senao','entao','ate','enquanto', 'programa', 'inicio', 'fim','faca','repita'] else ('numero' if re.search('[0-9]([0-9]?)(.[0-9]([0-9]*)?)?([Ee][+-]?[0-9]([0-9])*)?',id.strip()) else ('identificador' if re.search('([a-zA-Z_]+)([a-zA-Z0-9_])*',id.strip()) else ''))))\n")

            file.write(f"\t\t\t\t\tif c not in ['\\n', '\\t', ' ','+','-','/',',','*',':',';','(',')','=']:\n")
            file.write(f"\t\t\t\t\t\tf.seek(f.tell()-1)\n")
            file.write(f"\t\t\t\t\t\ttabelaSimbolos[id[:-1].strip()] = Atributo(tipo,id[:-1].strip())\n")
            file.write(f"\t\t\t\t\t\treturn Token(tipo,id[:-1].strip(),linha,coluna)\n")
            file.write(f"\t\t\t\t\telif c in ['\\n', '\\t', ' ',';',')','+']:\n")
            file.write(f"\t\t\t\t\t\ttabelaSimbolos[id] = Atributo(tipo,id)\n")
            file.write(f"\t\t\t\t\t\treturn Token(tipo,id,linha,coluna)\n")
            file.write(f"\t\t\t\t\telse:\n")
            file.write(f"\t\t\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
            file.write(f"\t\t\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")

        if value in finais and value not in finalTratado and value not in finalApareceu and value != 'AN':
            finalApareceu.append(value)

        if key_[1] == '\'':
            file.write(f"\t\t\t\telse:\n")
            file.write(f"\t\t\t\t\tstate = 'ER'\n")
            file.write(
                f"\t\t\t\t\treturn Token('Erro',f\"Erro - caracter {{c}} nao e reconhecido\",linha,coluna)\n")

    file.write(f"\t\t\tcase 'W':\n")
    file.write(f"\t\t\t\tc = nextChar()\n")
    file.write(f"\t\t\t\tif c == ']':\n")
    file.write(f"\t\t\t\t\tstate = 'X'\n")
    file.write(f"\t\t\t\telse:\n")
    file.write(f"\t\t\t\t\tstate = 'W'\n")



    for final in finalApareceu:
        if final == 'AN':
            file.write(f"\t\t\telse:\n")
        else:
            file.write(f"\t\t\tcase '{final}':\n")

        #file.write(f"\t\t\t\tprint('Tratar retorno estado final {final}')\n")
        file.write(f"\t\t\t\tstate = 'A'\n")
        file.write(f"\t\t\t\tlerProx = False\n")
        if final != 'AS':
            file.write(f"\t\t\t\ttipo = 'op_rela' if id in ['=','<','>','<>','<=','>=','='] else ('op_arit' if id in ['+','-','*','/','^'] else ( id.strip() if id.strip() in ['se','senao','entao','ate','enquanto', 'programa', 'inicio', 'fim','faca','repita'] else ('numero' if re.search('[0-9]([0-9]?)(.[0-9]([0-9]*)?)?([Ee][+-]?[0-9]([0-9])*)?',id.strip()) else ('identificador' if re.search('([a-zA-Z_]+)([a-zA-Z0-9_])*',id.strip()) else ''))))\n")
            file.write(f"\t\t\t\tif c not in ['\\n', '\\t', ' ']:\n")
            file.write(f"\t\t\t\t\tf.seek(f.tell()-1)\n")
            file.write(f"\t\t\t\ttabelaSimbolos[id.strip()] = Atributo(tipo,id.strip())\n")
            file.write(f"\t\t\t\treturn Token(tipo,id.strip(),linha,coluna)\n")
        finalTratado.append(final)
        finalApareceu = []

    file.write(f"\n")
    file.write(f"def simuladorSintatico():\n")
    file.write(f"\tglobal tabelaSimbolos\n")
    file.write(f"\twhile True:\n")
    file.write(f"\t\ttry:\n")
    file.write(f"\t\t\ttoken = lex()\n")
    file.write(f"\t\t\tprint(f\"<{{token.tipo}}, {{token.atributo}}, {{token.linha}}, {{token.coluna}}>\")\n")
    file.write(f"\t\t\tif token.tipo == 'Erro':\n")
    file.write(f"\t\t\t\tbreak\n")
    file.write(f"\t\texcept EOFError:\n")
    file.write(f"\t\t\tbreak\n")
    file.write(f"\tprint('Tabela de simbolos')\n")
    file.write(f"\tfor key, value in tabelaSimbolos.items():\n")
    file.write(f"\t\tprint(f\"key {{key}} nome {{value.nome}} valor {{value.valor}}\")\n")
    file.write(f"simuladorSintatico()\n")

criar_cases()
